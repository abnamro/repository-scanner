{
	"info": {
		"_postman_id": "a11314ec-468b-403f-9c96-89598f997508",
		"name": "Repository Scanner (RESC)",
		"description": "RESC API helps you to perform several operations upon findings obtained from multiple source code repositories. ðŸš€",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "resc/v1",
			"item": [
				{
					"name": "health",
					"item": [
						{
							"name": "Health check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson.status).to.be.a(\"string\");",
											"    pm.expect(responseJson.status).to.eql(\"OK\");",
											"});",
											"",
											"pm.test(\"Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/health",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"health"
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/resc/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"resc",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						}
					]
				},
				{
					"name": "common",
					"item": [
						{
							"name": "Get supported vcs providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(3);",
											"    pm.expect(responseJson).to.eql([ \"AZURE_DEVOPS\", \"BITBUCKET\", \"GITHUB_PUBLIC\" ] );",
											"    pm.expect(responseJson).to.include(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson).to.include(\"BITBUCKET\");",
											"    pm.expect(responseJson).to.include(\"GITHUB_PUBLIC\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/supported-vcs-providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"supported-vcs-providers"
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Auth check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson.message).to.be.a(\"string\");",
											"    pm.expect(responseJson.message).to.eql(\"OK\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/auth-check",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"auth-check"
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/resc/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"resc",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						}
					]
				},
				{
					"name": "rule-packs",
					"item": [
						{
							"name": "Upload rule pack in toml format when rule pack version already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Status is Conflict\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Conflict\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Unable to process rules. Rule pack version 1.0.0 already exists\"); ",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "rule_file",
											"contentType": "application/octet-stream",
											"type": "file",
											"src": "gitleaks.toml"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs?version=1.0.0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload rule pack in toml format when invalid rule pack version provided",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"value_error.str.regex\"); ",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"string does not match regex \\\"^\\\\d+(?:\\\\.\\\\d+){2}$\\\"\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "rule_file",
											"contentType": "application/octet-stream",
											"type": "file",
											"src": "gitleaks.toml"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs?version=1.0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload rule pack in toml format when invalid content type provided",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Status is Internal Server Error\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Internal Server Error\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Invalid document type, only TOML file is supported\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "rule_file",
											"contentType": "",
											"type": "file",
											"src": "gitleaks.toml"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs?version=1.0.0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload rule pack in toml format when invalid rule pack format provided",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Status is Internal Server Error\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Internal Server Error\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Invalid document type, only TOML file is supported\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "rule_file",
											"contentType": "application/octet-stream",
											"type": "file",
											"src": "test.env"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs?version=1.0.0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get rule packs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][0][\"version\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][0][\"active\"]).to.eql(true);",
											"    pm.expect(responseJson[\"data\"][0][\"global_allow_list\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs/versions?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs",
										"versions"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get rule packs with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"",
											"    pm.expect(responseJson[\"detail\"][1][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][1][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs/versions?skip=invalid&limit=invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs",
										"versions"
									],
									"query": [
										{
											"key": "skip",
											"value": "invalid"
										},
										{
											"key": "limit",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get rule packs with version filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][0][\"version\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][0][\"active\"]).to.eql(true);",
											"    pm.expect(responseJson[\"data\"][0][\"global_allow_list\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs/versions?version=1.0.0&skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs",
										"versions"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0.0"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get rule packs with invalid version filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"value_error.str.regex\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"string does not match regex \\\"^\\\\d+(?:\\\\.\\\\d+){2}$\\\"\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs/versions?version=1.0&skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs",
										"versions"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get rule packs with active filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][0][\"version\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][0][\"active\"]).to.eql(true);",
											"    pm.expect(responseJson[\"data\"][0][\"global_allow_list\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs/versions?active=true&skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs",
										"versions"
									],
									"query": [
										{
											"key": "active",
											"value": "true"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get rule packs with invalid active filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.bool\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value could not be parsed to a boolean\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs/versions?active=invalid&skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs",
										"versions"
									],
									"query": [
										{
											"key": "active",
											"value": "invalid"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get rule packs with version and active filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][0][\"version\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][0][\"active\"]).to.eql(true);",
											"    pm.expect(responseJson[\"data\"][0][\"global_allow_list\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs/versions?version=1.0.0&active=true&skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs",
										"versions"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0.0"
										},
										{
											"key": "active",
											"value": "true"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get rule packs with non existent version filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"].length).to.eql(0);",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs/versions?version=1.0.9&skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs",
										"versions"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0.9"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Download rule pack in TOML format with non existent version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"No rule pack found with version 1.0.9\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs?version=1.0.9",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0.9"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Download rule pack in TOML format with invalid version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"value_error.str.regex\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"string does not match regex \\\"^\\\\d+(?:\\\\.\\\\d+){2}$\\\"\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs?version=1.0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Download rule pack in TOML format when rule pack version exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"pm.test(\"Response time is less than 10000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs?version=1.0.0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0.0"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get rule packs tags with no filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(1);",
											"    pm.expect(responseJson).to.eql([\"Cli\"] );",
											"    pm.expect(responseJson).to.include(\"Cli\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs",
										"tags"
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get rule packs tags with version filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(1);",
											"    pm.expect(responseJson).to.eql([\"Cli\"] );",
											"    pm.expect(responseJson).to.include(\"Cli\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs/tags?version=1.0.0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs",
										"tags"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0.0"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get rule packs tags with multiple versions filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(1);",
											"    pm.expect(responseJson).to.eql([\"Cli\"] );",
											"    pm.expect(responseJson).to.include(\"Cli\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs/tags?version=1.0.0&version=1.0.1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs",
										"tags"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0.0"
										},
										{
											"key": "version",
											"value": "1.0.1"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get rule packs tags with non existent  version filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs/tags?version=1.0.1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs",
										"tags"
									],
									"query": [
										{
											"key": "version",
											"value": "1.0.1"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get rule packs tags with invalid version filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rule-packs/tags?version=invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rule-packs",
										"tags"
									],
									"query": [
										{
											"key": "version",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						}
					]
				},
				{
					"name": "vcs-instances",
					"item": [
						{
							"name": "Create a vcs instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status is Created\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Created\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"id_\"]).to.be.greaterThan(0);",
											"    pm.environment.set(\"vcs_instance_id\", responseJson[\"id_\"]);",
											"    pm.expect(responseJson[\"name\"]).to.eql(\"AzureDevOps\");",
											"    pm.expect(responseJson[\"provider_type\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"hostname\"]).to.eql(\"dev.azure.com\");",
											"    pm.expect(responseJson[\"port\"]).to.eql(443);",
											"    pm.expect(responseJson[\"scope\"]).to.eql([\"Project1\", \"Project2\"]);",
											"    pm.expect(responseJson[\"scope\"]).to.include(\"Project1\");",
											"    pm.expect(responseJson[\"scope\"]).to.include(\"Project2\");",
											"    pm.expect(responseJson[\"exceptions\"]).to.eql([]);",
											"    pm.expect(responseJson[\"organization\"]).to.include(\"test-org\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"AzureDevOps\",\n  \"provider_type\": \"AZURE_DEVOPS\",\n  \"hostname\": \"dev.azure.com\",\n  \"port\": 443,\n  \"scheme\": \"https\",\n  \"exceptions\": [],\n  \"scope\": [\n    \"Project1\", \"Project2\"\n  ],\n  \"organization\": \"test-org\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances"
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Create a vcs instance with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.enum\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid enumeration member; permitted: 'AZURE_DEVOPS', 'BITBUCKET', 'GITHUB_PUBLIC'\");",
											"",
											"    pm.expect(responseJson[\"detail\"][1][\"type\"]).to.eql(\"value_error\");",
											"    pm.expect(responseJson[\"detail\"][1][\"msg\"]).to.eql(\"The scheme 'http/https' must be one of the following http, https\");",
											"",
											"    pm.expect(responseJson[\"detail\"][2][\"type\"]).to.eql(\"value_error\");",
											"    pm.expect(responseJson[\"detail\"][2][\"msg\"]).to.eql(\"You cannot specify bot the scope and exceptions to the scan, only one setting is supported.\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Github\",\n  \"provider_type\": \"Test-Provider\",\n  \"hostname\":\"test-host\",\n  \"port\": \"443\",\n  \"scheme\": \"http/https\",\n  \"exceptions\": [\n    \"Project1\"\n  ],\n  \"scope\": [\n    \"Project1\"\n  ],\n  \"organization\":\"test=org\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances"
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Fetch a vcs instance by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"id_\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"    pm.expect(responseJson[\"name\"]).to.eql(\"AzureDevOps\");",
											"    pm.expect(responseJson[\"provider_type\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"hostname\"]).to.eql(\"dev.azure.com\");",
											"    pm.expect(responseJson[\"port\"]).to.eql(443);",
											"    pm.expect(responseJson[\"scope\"]).to.eql([\"Project1\", \"Project2\"]);",
											"    pm.expect(responseJson[\"scope\"]).to.include(\"Project1\");",
											"    pm.expect(responseJson[\"scope\"]).to.include(\"Project2\");",
											"    pm.expect(responseJson[\"exceptions\"]).to.eql([]);",
											"    pm.expect(responseJson[\"organization\"]).to.include(\"test-org\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances/:vcs_instance_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances",
										":vcs_instance_id"
									],
									"variable": [
										{
											"key": "vcs_instance_id",
											"value": "{{vcs_instance_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Fetch a vcs instance with non existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"VCS Instance not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances/:vcs_instance_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances",
										":vcs_instance_id"
									],
									"variable": [
										{
											"key": "vcs_instance_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all vcs instances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"",
											"    pm.expect(responseJson.data[0][\"id_\"]).to.eql(1);",
											"    pm.expect(responseJson.data[0][\"name\"]).to.eql(\"AZURE_DEVOPS_ACCEPTANCE\");",
											"    pm.expect(responseJson.data[0][\"provider_type\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson.data[0][\"hostname\"]).to.eql(\"fake-dev.azure.com\");",
											"    pm.expect(responseJson.data[0][\"port\"]).to.eql(443);",
											"    pm.expect(responseJson.data[0][\"scope\"]).to.eql([\"ado-project1\", \"ado-project2\"]);",
											"    pm.expect(responseJson.data[0][\"scope\"]).to.include(\"ado-project1\");",
											"    pm.expect(responseJson.data[0][\"scope\"]).to.include(\"ado-project2\");",
											"    pm.expect(responseJson.data[0][\"exceptions\"]).to.eql([]);",
											"    pm.expect(responseJson.data[0][\"organization\"]).to.include(\"ado-org\");",
											"",
											"    pm.expect(responseJson.data[1][\"id_\"]).to.eql(2);",
											"    pm.expect(responseJson.data[1][\"name\"]).to.eql(\"BITBUCKET_DEV\");",
											"    pm.expect(responseJson.data[1][\"provider_type\"]).to.eql(\"BITBUCKET\");",
											"    pm.expect(responseJson.data[1][\"hostname\"]).to.eql(\"fake-bitbucket.com\");",
											"    pm.expect(responseJson.data[1][\"port\"]).to.eql(443);",
											"    pm.expect(responseJson.data[1][\"scope\"]).to.eql([]);",
											"    pm.expect(responseJson.data[1][\"exceptions\"]).to.eql([]);",
											"    pm.expect(responseJson.data[1][\"organization\"]).to.eql(null);",
											"",
											"    pm.expect(responseJson.data[2][\"id_\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"    pm.expect(responseJson.data[2][\"name\"]).to.eql(\"AzureDevOps\");",
											"    pm.expect(responseJson.data[2][\"provider_type\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson.data[2][\"hostname\"]).to.eql(\"dev.azure.com\");",
											"    pm.expect(responseJson.data[2][\"port\"]).to.eql(443);",
											"    pm.expect(responseJson.data[2][\"scope\"]).to.eql([\"Project1\", \"Project2\"]);",
											"    pm.expect(responseJson.data[2][\"scope\"]).to.include(\"Project1\");",
											"    pm.expect(responseJson.data[2][\"scope\"]).to.include(\"Project2\");",
											"    pm.expect(responseJson.data[2][\"exceptions\"]).to.eql([]);",
											"    pm.expect(responseJson.data[2][\"organization\"]).to.include(\"test-org\");",
											"",
											"    pm.expect(responseJson[\"total\"]).to.eql(3);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all vcs instances with vcs provider filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\"OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"",
											"    pm.expect(responseJson.data[0][\"id_\"]).to.eql(1);",
											"    pm.expect(responseJson.data[0][\"name\"]).to.eql(\"AZURE_DEVOPS_ACCEPTANCE\");",
											"    pm.expect(responseJson.data[0][\"provider_type\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson.data[0][\"hostname\"]).to.eql(\"fake-dev.azure.com\");",
											"    pm.expect(responseJson.data[0][\"port\"]).to.eql(443);",
											"    pm.expect(responseJson.data[0][\"scope\"]).to.eql([\"ado-project1\", \"ado-project2\"]);",
											"    pm.expect(responseJson.data[0][\"scope\"]).to.include(\"ado-project1\");",
											"    pm.expect(responseJson.data[0][\"scope\"]).to.include(\"ado-project2\");",
											"    pm.expect(responseJson.data[0][\"exceptions\"]).to.eql([]);",
											"    pm.expect(responseJson.data[0][\"organization\"]).to.include(\"ado-org\");",
											"",
											"    pm.expect(responseJson.data[1][\"id_\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"    pm.expect(responseJson.data[1][\"name\"]).to.eql(\"AzureDevOps\");",
											"    pm.expect(responseJson.data[1][\"provider_type\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson.data[1][\"hostname\"]).to.eql(\"dev.azure.com\");",
											"    pm.expect(responseJson.data[1][\"port\"]).to.eql(443);",
											"    pm.expect(responseJson.data[1][\"scope\"]).to.eql([\"Project1\", \"Project2\"]);",
											"    pm.expect(responseJson.data[1][\"scope\"]).to.include(\"Project1\");",
											"    pm.expect(responseJson.data[1][\"scope\"]).to.include(\"Project2\");",
											"    pm.expect(responseJson.data[1][\"exceptions\"]).to.eql([]);",
											"    pm.expect(responseJson.data[1][\"organization\"]).to.include(\"test-org\");",
											"    ",
											"    pm.expect(responseJson[\"total\"]).to.eql(2);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances?skip=0&limit=100&vcs_provider_type=AZURE_DEVOPS",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "vcs_provider_type",
											"value": "AZURE_DEVOPS"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all vcs instances with non exisiting vcs provider in filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.enum\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid enumeration member; permitted: 'AZURE_DEVOPS', 'BITBUCKET', 'GITHUB_PUBLIC'\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances?skip=0&limit=100&vcs_provider_type=notexists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "vcs_provider_type",
											"value": "notexists"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all vcs instances with vcs instance name filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson.data[0][\"id_\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"    pm.expect(responseJson.data[0][\"name\"]).to.eql(\"AzureDevOps\");",
											"    pm.expect(responseJson.data[0][\"provider_type\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson.data[0][\"hostname\"]).to.eql(\"dev.azure.com\");",
											"    pm.expect(responseJson.data[0][\"port\"]).to.eql(443);",
											"    pm.expect(responseJson.data[0][\"scope\"]).to.eql([\"Project1\", \"Project2\"]);",
											"    pm.expect(responseJson.data[0][\"scope\"]).to.include(\"Project1\");",
											"    pm.expect(responseJson.data[0][\"scope\"]).to.include(\"Project2\");",
											"    pm.expect(responseJson.data[0][\"exceptions\"]).to.eql([]);",
											"    pm.expect(responseJson.data[0][\"organization\"]).to.include(\"test-org\");",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances?skip=0&limit=100&vcs_instance_name=AzureDevOps",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "vcs_instance_name",
											"value": "AzureDevOps"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all vcs instances with non existent vcs instance name in filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\").that.is.empty;",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances?skip=0&limit=100&vcs_instance_name=notexists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "vcs_instance_name",
											"value": "notexists"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all vcs instances with vcs provider and vcs instance name filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson.data[0][\"id_\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"    pm.expect(responseJson.data[0][\"name\"]).to.eql(\"AzureDevOps\");",
											"    pm.expect(responseJson.data[0][\"provider_type\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson.data[0][\"hostname\"]).to.eql(\"dev.azure.com\");",
											"    pm.expect(responseJson.data[0][\"port\"]).to.eql(443);",
											"    pm.expect(responseJson.data[0][\"scope\"]).to.eql([\"Project1\", \"Project2\"]);",
											"    pm.expect(responseJson.data[0][\"scope\"]).to.include(\"Project1\");",
											"    pm.expect(responseJson.data[0][\"scope\"]).to.include(\"Project2\");",
											"    pm.expect(responseJson.data[0][\"exceptions\"]).to.eql([]);",
											"    pm.expect(responseJson.data[0][\"organization\"]).to.include(\"test-org\");",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances?skip=0&limit=100&vcs_provider_type=AZURE_DEVOPS&vcs_instance_name=AzureDevOps",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "vcs_provider_type",
											"value": "AZURE_DEVOPS"
										},
										{
											"key": "vcs_instance_name",
											"value": "AzureDevOps"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Update a vcs instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"id_\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"    pm.expect(responseJson[\"name\"]).to.eql(\"AzureDevOps\");",
											"    pm.expect(responseJson[\"provider_type\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"hostname\"]).to.eql(\"dev.azure.com\");",
											"    pm.expect(responseJson[\"port\"]).to.eql(443);",
											"    pm.expect(responseJson[\"scope\"]).to.eql([\"Project1\", \"Project2\"]);",
											"    pm.expect(responseJson[\"scope\"]).to.include(\"Project1\");",
											"    pm.expect(responseJson[\"scope\"]).to.include(\"Project2\");",
											"    pm.expect(responseJson[\"exceptions\"]).to.eql([]);",
											"    pm.expect(responseJson[\"organization\"]).to.include(\"test-org\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"AzureDevOps\",\n  \"provider_type\": \"AZURE_DEVOPS\",\n  \"hostname\": \"dev.azure.com\",\n  \"port\": 443,\n  \"scheme\": \"https\",\n  \"exceptions\": [],\n  \"scope\": [\n    \"Project1\", \"Project2\"\n  ],\n  \"organization\": \"test-org\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances/:vcs_instance_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances",
										":vcs_instance_id"
									],
									"variable": [
										{
											"key": "vcs_instance_id",
											"value": "{{vcs_instance_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Update a vcs instance with non existent id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"VCS instance not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"TestProvider\",\n  \"provider_type\": \"AZURE_DEVOPS\",\n  \"hostname\": \"test-host\",\n  \"port\": 443,\n  \"scheme\": \"http\",\n  \"exceptions\": [],\n  \"scope\": [\n    \"Project1\"\n  ],\n  \"organization\": \"test-org\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances/:vcs_instance_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances",
										":vcs_instance_id"
									],
									"variable": [
										{
											"key": "vcs_instance_id",
											"value": "999"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Update a vcs instance with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.enum\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid enumeration member; permitted: 'AZURE_DEVOPS', 'BITBUCKET', 'GITHUB_PUBLIC'\");",
											"",
											"    pm.expect(responseJson[\"detail\"][1][\"type\"]).to.eql(\"value_error\");",
											"    pm.expect(responseJson[\"detail\"][1][\"msg\"]).to.eql(\"The scheme 'http/https' must be one of the following http, https\");",
											"",
											"    pm.expect(responseJson[\"detail\"][2][\"type\"]).to.eql(\"value_error\");",
											"    pm.expect(responseJson[\"detail\"][2][\"msg\"]).to.eql(\"You cannot specify bot the scope and exceptions to the scan, only one setting is supported.\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Github\",\n  \"provider_type\": \"Test-Provider\",\n  \"hostname\":\"test-host\",\n  \"port\": \"443\",\n  \"scheme\": \"http/https\",\n  \"exceptions\": [\n    \"Project1\"\n  ],\n  \"scope\": [\n    \"Project1\"\n  ],\n  \"organization\":\"test=org\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances/:vcs_instance_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances",
										":vcs_instance_id"
									],
									"variable": [
										{
											"key": "vcs_instance_id",
											"value": "{{vcs_instance_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Delete a vcs instance which doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"VCS instance not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances/:vcs_instance_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances",
										":vcs_instance_id"
									],
									"variable": [
										{
											"key": "vcs_instance_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						},
						{
							"name": "Delete a vcs instance with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances/:vcs_instance_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances",
										":vcs_instance_id"
									],
									"variable": [
										{
											"key": "vcs_instance_id",
											"value": "one"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						}
					]
				},
				{
					"name": "repositories",
					"item": [
						{
							"name": "Create a repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status is Created\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Created\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"id_\"]).to.be.greaterThan(0);",
											"    pm.environment.set(\"repository_id\", responseJson[\"id_\"]);",
											"    pm.expect(responseJson[\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"repository_id\"]).to.eql(\"test-repository-id1\");",
											"    pm.expect(responseJson[\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"vcs_instance\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"project_key\": \"test-project\",\n  \"repository_id\": \"test-repository-id1\",\n  \"repository_name\": \"test-repository\",\n  \"repository_url\": \"https://dev.azure.com/test-org/test-project/_git/test-repository\",\n  \"vcs_instance\": {{vcs_instance_id}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories"
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Create a repository with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"value_error.url.scheme\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"invalid or missing URL scheme\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"project_key\": \"test-project\",\n  \"repository_id\": \"test-repository-id\",\n  \"repository_name\": \"test-repository\",\n  \"repository_url\": \"github.com\",\n  \"vcs_instance\": {{vcs_instance_id}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories"
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Create a repository with non existent vcs instance ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Status is Internal Server Error\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Internal Server Error\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Internal server error. Contact your system administrator\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"project_key\": \"test-project\",\n  \"repository_id\": \"test-repository-id1\",\n  \"repository_name\": \"test-repository\",\n  \"repository_url\": \"https://dev.azure.com/test-org/test-project/_git/test-repository\",\n  \"vcs_instance\": 999\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories"
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Fetch a repository by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\"OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"id_\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson[\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"repository_id\"]).to.eql(\"test-repository-id1\");",
											"    pm.expect(responseJson[\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"vcs_instance\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "{{repository_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Fetch a repository by non existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Repository not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Fetch a repository by invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "one"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all repositories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"",
											"    pm.expect(responseJson.data[0][\"id_\"]).to.eql(1);",
											"    pm.expect(responseJson.data[0][\"project_key\"]).to.eql(\"ado-project1\");",
											"    pm.expect(responseJson.data[0][\"repository_id\"]).to.eql(\"r1\");",
											"    pm.expect(responseJson.data[0][\"repository_name\"]).to.eql(\"resc-dummy1\");",
											"    pm.expect(responseJson.data[0][\"repository_url\"]).to.eql(\"https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1\");",
											"    pm.expect(responseJson.data[0][\"vcs_instance\"]).to.eql(1);",
											"",
											"    pm.expect(responseJson.data[1][\"id_\"]).to.eql(2);",
											"    pm.expect(responseJson.data[1][\"project_key\"]).to.eql(\"ado-project2\");",
											"    pm.expect(responseJson.data[1][\"repository_id\"]).to.eql(\"r2\");",
											"    pm.expect(responseJson.data[1][\"repository_name\"]).to.eql(\"resc-dummy2\");",
											"    pm.expect(responseJson.data[1][\"repository_url\"]).to.eql(\"https://fake-dev.azure.com/ado-org/ado-project2/_git/resc-dummy2\");",
											"    pm.expect(responseJson.data[1][\"vcs_instance\"]).to.eql(1);",
											"",
											"    pm.expect(responseJson.data[2][\"id_\"]).to.eql(3);",
											"    pm.expect(responseJson.data[2][\"project_key\"]).to.eql(\"btbk-project1\");",
											"    pm.expect(responseJson.data[2][\"repository_id\"]).to.eql(\"r3\");",
											"    pm.expect(responseJson.data[2][\"repository_name\"]).to.eql(\"resc-dummy3\");",
											"    pm.expect(responseJson.data[2][\"repository_url\"]).to.eql(\"https://fake-bitbucket.com/scm/r3/resc-dummy3.git\");",
											"    pm.expect(responseJson.data[2][\"vcs_instance\"]).to.eql(2);",
											"",
											"    pm.expect(responseJson.data[3][\"id_\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson.data[3][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson.data[3][\"repository_id\"]).to.eql(\"test-repository-id1\");",
											"    pm.expect(responseJson.data[3][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson.data[3][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson.data[3][\"vcs_instance\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"",
											"    pm.expect(responseJson[\"total\"]).to.eql(4);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all repositories with project filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson.data[0][\"id_\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson.data[0][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson.data[0][\"repository_id\"]).to.eql(\"test-repository-id1\");",
											"    pm.expect(responseJson.data[0][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson.data[0][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson.data[0][\"vcs_instance\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories?skip=0&limit=100&projectfilter=test-project",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "projectfilter",
											"value": "test-project"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all repositories with non existent project filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson.data[0][\"id_\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson.data[0][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson.data[0][\"repository_id\"]).to.eql(\"test-repository-id1\");",
											"    pm.expect(responseJson.data[0][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson.data[0][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson.data[0][\"vcs_instance\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories?skip=0&limit=100&projectfilter=test-project",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "projectfilter",
											"value": "test-project"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all repositories with repository filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson.data[0][\"id_\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson.data[0][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson.data[0][\"repository_id\"]).to.eql(\"test-repository-id1\");",
											"    pm.expect(responseJson.data[0][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson.data[0][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson.data[0][\"vcs_instance\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories?skip=0&limit=100&repositoryfilter=test-repository",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "repositoryfilter",
											"value": "test-repository"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all repositories with non existent repository filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\").that.is.empty;",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories?skip=0&limit=100&repositoryfilter=notexists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "repositoryfilter",
											"value": "notexists"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all repositories with vcs provider filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"",
											"    pm.expect(responseJson.data[0][\"id_\"]).to.eql(1);",
											"    pm.expect(responseJson.data[0][\"project_key\"]).to.eql(\"ado-project1\");",
											"    pm.expect(responseJson.data[0][\"repository_id\"]).to.eql(\"r1\");",
											"    pm.expect(responseJson.data[0][\"repository_name\"]).to.eql(\"resc-dummy1\");",
											"    pm.expect(responseJson.data[0][\"repository_url\"]).to.eql(\"https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1\");",
											"    pm.expect(responseJson.data[0][\"vcs_instance\"]).to.eql(1);",
											"",
											"",
											"    pm.expect(responseJson.data[1][\"id_\"]).to.eql(2);",
											"    pm.expect(responseJson.data[1][\"project_key\"]).to.eql(\"ado-project2\");",
											"    pm.expect(responseJson.data[1][\"repository_id\"]).to.eql(\"r2\");",
											"    pm.expect(responseJson.data[1][\"repository_name\"]).to.eql(\"resc-dummy2\");",
											"    pm.expect(responseJson.data[1][\"repository_url\"]).to.eql(\"https://fake-dev.azure.com/ado-org/ado-project2/_git/resc-dummy2\");",
											"    pm.expect(responseJson.data[1][\"vcs_instance\"]).to.eql(1);",
											"",
											"    pm.expect(responseJson.data[2][\"id_\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson.data[2][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson.data[2][\"repository_id\"]).to.eql(\"test-repository-id1\");",
											"    pm.expect(responseJson.data[2][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson.data[2][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson.data[2][\"vcs_instance\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"",
											"    pm.expect(responseJson[\"total\"]).to.eql(3);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories?skip=0&limit=100&vcsprovider=AZURE_DEVOPS",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "vcsprovider",
											"value": "AZURE_DEVOPS"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all repositories with invalid vcs provider filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.enum\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid enumeration member; permitted: 'AZURE_DEVOPS', 'BITBUCKET', 'GITHUB_PUBLIC'\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories?skip=0&limit=100&vcsprovider=invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "vcsprovider",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all repositories with vcs provider, project and repository filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson.data[0][\"id_\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson.data[0][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson.data[0][\"repository_id\"]).to.eql(\"test-repository-id1\");",
											"    pm.expect(responseJson.data[0][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson.data[0][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson.data[0][\"vcs_instance\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories?skip=0&limit=100&vcsprovider=AZURE_DEVOPS&projectfilter=test-project&repositoryfilter=test-repository",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "vcsprovider",
											"value": "AZURE_DEVOPS"
										},
										{
											"key": "projectfilter",
											"value": "test-project"
										},
										{
											"key": "repositoryfilter",
											"value": "test-repository"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Update a repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"id_\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson[\"vcs_instance\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"    pm.expect(responseJson[\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"repository_id\"]).to.eql(\"test-repository-id1\");",
											"    pm.expect(responseJson[\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"project_key\": \"test-project\",\n  \"repository_id\": \"test-repository-id1\",\n  \"repository_name\": \"test-repository\",\n  \"repository_url\": \"https://dev.azure.com/test-org/test-project/_git/test-repository\",\n  \"vcs_instance\": {{vcs_instance_id}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "{{repository_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Update a repository with non existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Repository not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"project_key\": \"test-project\",\n  \"repository_id\": \"test-repository-id1\",\n  \"repository_name\": \"test-repository\",\n  \"repository_url\": \"https://dev.azure.com/test-org/test-project/_git/test-repository\",\n  \"vcs_instance\": {{vcs_instance_id}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "999"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Update a repository with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"value_error.url.scheme\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"invalid or missing URL scheme\");",
											"    pm.expect(responseJson[\"detail\"][1][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][1][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"project_key\": \"test-project\",\n  \"repository_id\": \"test-repository-id1\",\n  \"repository_name\": \"test-repository\",\n  \"repository_url\": \"dev.azure.com\",\n  \"vcs_instance\": \"str\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "{{repository_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Get all unique project names",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(4);",
											"    pm.expect(responseJson).to.eql([\"ado-project1\",\"ado-project2\",\"btbk-project1\",\"test-project\"] );",
											"    pm.expect(responseJson).to.include(\"ado-project1\");",
											"    pm.expect(responseJson).to.include(\"ado-project2\");",
											"    pm.expect(responseJson).to.include(\"btbk-project1\");",
											"    pm.expect(responseJson).to.include(\"test-project\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-projects/?onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-projects",
										""
									],
									"query": [
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique project names for which findings exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(1);",
											"    pm.expect(responseJson).to.eql([\"ado-project1\"]);",
											"    pm.expect(responseJson).to.include(\"ado-project1\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-projects/?onlyifhasfindings=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-projects",
										""
									],
									"query": [
										{
											"key": "onlyifhasfindings",
											"value": "true"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique project names for which findings doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(4);",
											"    pm.expect(responseJson).to.eql([\"ado-project1\",\"ado-project2\",\"btbk-project1\",\"test-project\"] );",
											"    pm.expect(responseJson).to.include(\"ado-project1\");",
											"    pm.expect(responseJson).to.include(\"ado-project2\");",
											"    pm.expect(responseJson).to.include(\"btbk-project1\");",
											"    pm.expect(responseJson).to.include(\"test-project\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-projects/?onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-projects",
										""
									],
									"query": [
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique project names with repository filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(1);",
											"    pm.expect(responseJson).to.eql([\"test-project\"] );",
											"    pm.expect(responseJson).to.include(\"test-project\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-projects/?repositoryfilter=test-repository&onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-projects",
										""
									],
									"query": [
										{
											"key": "repositoryfilter",
											"value": "test-repository"
										},
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique project names with non existent repository filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\").that.is.empty;;",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-projects/?repositoryfilter=nonexistent&onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-projects",
										""
									],
									"query": [
										{
											"key": "repositoryfilter",
											"value": "nonexistent"
										},
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique project names with vcs provider filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(3);",
											"    pm.expect(responseJson).to.eql([\"ado-project1\",\"ado-project2\",\"test-project\"]);",
											"    pm.expect(responseJson).to.include(\"ado-project1\");",
											"    pm.expect(responseJson).to.include(\"ado-project2\");",
											"    pm.expect(responseJson).to.include(\"test-project\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-projects/?vcsprovider=AZURE_DEVOPS&onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-projects",
										""
									],
									"query": [
										{
											"key": "vcsprovider",
											"value": "AZURE_DEVOPS"
										},
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique project names with invalid vcs provider filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.enum\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid enumeration member; permitted: 'AZURE_DEVOPS', 'BITBUCKET', 'GITHUB_PUBLIC'\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-projects/?vcsprovider=invalid&onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-projects",
										""
									],
									"query": [
										{
											"key": "vcsprovider",
											"value": "invalid"
										},
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique project names with vcs provider and repository filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"};",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(1);",
											"    pm.expect(responseJson).to.eql([\"test-project\"]);",
											"    pm.expect(responseJson).to.include(\"test-project\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-projects/?vcsprovider=AZURE_DEVOPS&repositoryfilter=test-repository&onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-projects",
										""
									],
									"query": [
										{
											"key": "vcsprovider",
											"value": "AZURE_DEVOPS"
										},
										{
											"key": "repositoryfilter",
											"value": "test-repository"
										},
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique repository names",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(4);",
											"    pm.expect(responseJson).to.eql([\"resc-dummy1\",\"resc-dummy2\",\"resc-dummy3\",\"test-repository\"] );",
											"    pm.expect(responseJson).to.include(\"resc-dummy1\");",
											"    pm.expect(responseJson).to.include(\"resc-dummy2\");",
											"    pm.expect(responseJson).to.include(\"resc-dummy3\");",
											"    pm.expect(responseJson).to.include(\"test-repository\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-repositories/?onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-repositories",
										""
									],
									"query": [
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique repository names for which findings exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(1);",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-repositories/?onlyifhasfindings=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-repositories",
										""
									],
									"query": [
										{
											"key": "onlyifhasfindings",
											"value": "true"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique repository names with vcs provider filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(3);",
											"    pm.expect(responseJson).to.eql([\"resc-dummy1\",\"resc-dummy2\",\"test-repository\"] );",
											"    pm.expect(responseJson).to.include(\"resc-dummy1\");",
											"    pm.expect(responseJson).to.include(\"resc-dummy2\");",
											"    pm.expect(responseJson).to.include(\"test-repository\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-repositories/?vcsprovider=AZURE_DEVOPS&onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-repositories",
										""
									],
									"query": [
										{
											"key": "vcsprovider",
											"value": "AZURE_DEVOPS"
										},
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique repository names with invalid vcs provider filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.enum\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid enumeration member; permitted: 'AZURE_DEVOPS', 'BITBUCKET', 'GITHUB_PUBLIC'\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-repositories/?vcsprovider=invalid&onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-repositories",
										""
									],
									"query": [
										{
											"key": "vcsprovider",
											"value": "invalid"
										},
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique repository names with project name filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(1);",
											"    pm.expect(responseJson).to.eql([\"test-repository\"] );",
											"    pm.expect(responseJson).to.include(\"test-repository\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-repositories/?projectname=test-project&onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-repositories",
										""
									],
									"query": [
										{
											"key": "projectname",
											"value": "test-project"
										},
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique repository names with non existent project name filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\").that.is.empty;;",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-repositories/?projectname=nonexistent&onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-repositories",
										""
									],
									"query": [
										{
											"key": "projectname",
											"value": "nonexistent"
										},
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all unique repository names with vcs provider and project name filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(1);",
											"    pm.expect(responseJson).to.eql([\"test-repository\"] );",
											"    pm.expect(responseJson).to.include(\"test-repository\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/distinct-repositories/?vcsprovider=AZURE_DEVOPS&projectname=test-project&onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"distinct-repositories",
										""
									],
									"query": [
										{
											"key": "vcsprovider",
											"value": "AZURE_DEVOPS"
										},
										{
											"key": "projectname",
											"value": "test-project"
										},
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get findings metadata for a repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][\"id_\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson[\"data\"][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"data\"][\"repository_id\"]).to.eql(\"test-repository-id1\");",
											"    pm.expect(responseJson[\"data\"][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"data\"][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"data\"][\"vcs_instance\"]).to.eql(pm.environment.get(\"vcs_instance_id\"));",
											"    pm.expect(responseJson[\"true_positive\"]).to.eql(0);",
											"    pm.expect(responseJson[\"false_positive\"]).to.eql(0);",
											"    pm.expect(responseJson[\"not_analyzed\"]).to.eql(0);",
											"    pm.expect(responseJson[\"under_review\"]).to.eql(0);",
											"    pm.expect(responseJson[\"clarification_required\"]).to.eql(0);",
											"    pm.expect(responseJson[\"total_findings_count\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id/findings-metadata",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id",
										"findings-metadata"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "{{repository_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all repositories with findings metadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"project_key\"]).to.eql(\"ado-project1\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_id\"]).to.eql(\"r1\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_name\"]).to.eql(\"resc-dummy1\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_url\"]).to.eql(\"https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1\");",
											"    pm.expect(responseJson[\"data\"][0][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][0][\"last_scan_id\"]).to.eql(2);",
											"    pm.expect(responseJson[\"data\"][0][\"last_scan_timestamp\"]).to.eql(\"2023-07-15T00:00:00\");",
											"    pm.expect(responseJson[\"data\"][0][\"true_positive\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"false_positive\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][0][\"not_analyzed\"]).to.eql(5);",
											"    pm.expect(responseJson[\"data\"][0][\"under_review\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][0][\"clarification_required\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][0][\"total_findings_count\"]).to.eql(6);",
											"",
											"    pm.expect(responseJson[\"data\"][1][\"id_\"]).to.eql(2);",
											"    pm.expect(responseJson[\"data\"][1][\"project_key\"]).to.eql(\"ado-project2\");",
											"    pm.expect(responseJson[\"data\"][1][\"repository_id\"]).to.eql(\"r2\");",
											"    pm.expect(responseJson[\"data\"][1][\"repository_name\"]).to.eql(\"resc-dummy2\");",
											"    pm.expect(responseJson[\"data\"][1][\"repository_url\"]).to.eql(\"https://fake-dev.azure.com/ado-org/ado-project2/_git/resc-dummy2\");",
											"    pm.expect(responseJson[\"data\"][1][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][1][\"last_scan_id\"]).to.eql(4);",
											"    pm.expect(responseJson[\"data\"][1][\"last_scan_timestamp\"]).to.eql(\"2023-07-15T00:00:00\");",
											"    pm.expect(responseJson[\"data\"][1][\"true_positive\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][1][\"false_positive\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][1][\"not_analyzed\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][1][\"under_review\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][1][\"clarification_required\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][1][\"total_findings_count\"]).to.eql(0);",
											"",
											"    pm.expect(responseJson[\"data\"][2][\"id_\"]).to.eql(3);",
											"    pm.expect(responseJson[\"data\"][2][\"project_key\"]).to.eql(\"btbk-project1\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_id\"]).to.eql(\"r3\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_name\"]).to.eql(\"resc-dummy3\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_url\"]).to.eql(\"https://fake-bitbucket.com/scm/r3/resc-dummy3.git\");",
											"    pm.expect(responseJson[\"data\"][2][\"vcs_provider\"]).to.eql(\"BITBUCKET\");",
											"    pm.expect(responseJson[\"data\"][2][\"last_scan_id\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][2][\"last_scan_timestamp\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][2][\"true_positive\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][2][\"false_positive\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][2][\"not_analyzed\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][2][\"under_review\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][2][\"clarification_required\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][2][\"total_findings_count\"]).to.eql(0);",
											"",
											"",
											"    pm.expect(responseJson[\"data\"][3][\"id_\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson[\"data\"][3][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"data\"][3][\"repository_id\"]).to.eql(\"test-repository-id1\");",
											"    pm.expect(responseJson[\"data\"][3][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"data\"][3][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"data\"][3][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][3][\"last_scan_id\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][3][\"last_scan_timestamp\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][3][\"true_positive\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][3][\"false_positive\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][3][\"not_analyzed\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][3][\"under_review\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][3][\"clarification_required\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][3][\"total_findings_count\"]).to.eql(0);",
											"",
											"    pm.expect(responseJson[\"total\"]).to.eql(4);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/findings-metadata/?skip=0&limit=100&onlyifhasfindings=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										"findings-metadata",
										""
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "onlyifhasfindings",
											"value": "false"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get latest scan for a repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.eq(null);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id/last-scan",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id",
										"last-scan"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "{{repository_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get latest scan for a repository with non existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.eq(null);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id/last-scan",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id",
										"last-scan"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get latest scan for a repository with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id/last-scan",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id",
										"last-scan"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scans for a repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"].length).to.eql(0);",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id/scans",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id",
										"scans"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "{{repository_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scans for a repository with non existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\"OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\").that.is.empty;;",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id/scans",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id",
										"scans"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scans for a repository with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id/scans",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id",
										"scans"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Delete a repository which doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Repository not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						},
						{
							"name": "Delete a repository with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "one"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						}
					]
				},
				{
					"name": "scans",
					"item": [
						{
							"name": "Create a scan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status is Created\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Created\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"id_\"]).to.be.greaterThan(0);",
											"    pm.environment.set(\"scan_id\", responseJson[\"id_\"]);",
											"    pm.expect(responseJson[\"scan_type\"]).to.eql(\"BASE\");",
											"    pm.expect(responseJson[\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"timestamp\"].substring(0, 10)).to.eql(pm.environment.get(\"currentdate\").substring(0, 10));",
											"    pm.expect(responseJson[\"increment_number\"]).to.eql(0);",
											"    pm.expect(responseJson[\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"repository_id\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const now = new Date().toISOString();",
											"pm.environment.set('currentdate', now);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scan_type\": \"BASE\",\n  \"last_scanned_commit\": \"testcommit12345\",\n  \"timestamp\": \"{{currentdate}}\",\n  \"increment_number\": 0,\n  \"rule_pack\": \"1.0.0\",\n  \"repository_id\": {{repository_id}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans"
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Create a scan with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.enum\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid enumeration member; permitted: 'BASE', 'INCREMENTAL'\");",
											"",
											"    pm.expect(responseJson[\"detail\"][1][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][1][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"",
											"    pm.expect(responseJson[\"detail\"][2][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][2][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scan_type\": \"TEST\",\n  \"last_scanned_commit\": \"testcommit12345\",\n  \"timestamp\": \"2023-01-30T22:51:31.486Z\",\n  \"increment_number\": \"one\",\n  \"rule_pack\": 1,\n  \"repository_id\": \"str\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans"
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Fetch a scan by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"scan_type\"]).to.eql(\"BASE\");",
											"    pm.expect(responseJson[\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"timestamp\"].substring(0, 10)).to.eql(pm.environment.get(\"currentdate\").substring(0, 10));",
											"    pm.expect(responseJson[\"increment_number\"]).to.eql(0);",
											"    pm.expect(responseJson[\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"repository_id\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson[\"id_\"]).to.eql(pm.environment.get(\"scan_id\"));",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id"
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Fetch a scan by non existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Scan not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id"
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Fetch a scan by invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id"
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all scans",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"",
											"    pm.expect(responseJson[\"data\"][0][\"scan_type\"]).to.eql(\"BASE\");",
											"    pm.expect(responseJson[\"data\"][0][\"last_scanned_commit\"]).to.eql(\"qwerty1\");",
											"    pm.expect(responseJson[\"data\"][0][\"timestamp\"]).to.eql(\"2023-07-14T00:00:00\");",
											"    pm.expect(responseJson[\"data\"][0][\"increment_number\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][0][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_id\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.eql(1);",
											"",
											"    pm.expect(responseJson[\"data\"][1][\"scan_type\"]).to.eql(\"INCREMENTAL\");",
											"    pm.expect(responseJson[\"data\"][1][\"last_scanned_commit\"]).to.eql(\"qwerty2\");",
											"    pm.expect(responseJson[\"data\"][1][\"timestamp\"]).to.eql(\"2023-07-15T00:00:00\");",
											"    pm.expect(responseJson[\"data\"][1][\"increment_number\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][1][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][1][\"repository_id\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][1][\"id_\"]).to.eql(2);",
											"",
											"    pm.expect(responseJson[\"data\"][2][\"scan_type\"]).to.eql(\"BASE\");",
											"    pm.expect(responseJson[\"data\"][2][\"last_scanned_commit\"]).to.eql(\"qwerty1\");",
											"    pm.expect(responseJson[\"data\"][2][\"timestamp\"]).to.eql(\"2023-07-14T00:00:00\");",
											"    pm.expect(responseJson[\"data\"][2][\"increment_number\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][2][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_id\"]).to.eql(2);",
											"    pm.expect(responseJson[\"data\"][2][\"id_\"]).to.eql(3);",
											"",
											"    pm.expect(responseJson[\"data\"][3][\"scan_type\"]).to.eql(\"INCREMENTAL\");",
											"    pm.expect(responseJson[\"data\"][3][\"last_scanned_commit\"]).to.eql(\"qwerty2\");",
											"    pm.expect(responseJson[\"data\"][3][\"timestamp\"]).to.eql(\"2023-07-15T00:00:00\");",
											"    pm.expect(responseJson[\"data\"][3][\"increment_number\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][3][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][3][\"repository_id\"]).to.eql(2);",
											"    pm.expect(responseJson[\"data\"][3][\"id_\"]).to.eql(4);",
											"",
											"    pm.expect(responseJson[\"data\"][4][\"scan_type\"]).to.eql(\"BASE\");",
											"    pm.expect(responseJson[\"data\"][4][\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][4][\"timestamp\"].substring(0, 10)).to.eql(pm.environment.get(\"currentdate\").substring(0, 10));",
											"    pm.expect(responseJson[\"data\"][4][\"increment_number\"]).to.eql(0);",
											"    pm.expect(responseJson[\"data\"][4][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][4][\"repository_id\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson[\"data\"][4][\"id_\"]).to.eql(pm.environment.get(\"scan_id\"));",
											"",
											"    pm.expect(responseJson[\"total\"]).to.eql(5);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all scans with invalid parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"",
											"    pm.expect(responseJson[\"detail\"][1][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][1][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans?skip=invalid&limit=invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans"
									],
									"query": [
										{
											"key": "skip",
											"value": "invalid"
										},
										{
											"key": "limit",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Update a scan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"id_\"]).to.be.greaterThan(0);",
											"    pm.environment.set(\"scan_id\", responseJson[\"id_\"]);",
											"    pm.expect(responseJson[\"scan_type\"]).to.eql(\"BASE\");",
											"    pm.expect(responseJson[\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"timestamp\"].substring(0, 10)).to.eql(pm.environment.get(\"currentdate\").substring(0, 10));",
											"    pm.expect(responseJson[\"increment_number\"]).to.eql(0);",
											"    pm.expect(responseJson[\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"repository_id\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scan_type\": \"BASE\",\n  \"last_scanned_commit\": \"testcommit12345\",\n  \"timestamp\": \"{{currentdate}}\",\n  \"increment_number\": 0,\n  \"rule_pack\": \"1.0.0\",\n  \"repository_id\": {{repository_id}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id"
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Update a scan with non existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Scan not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scan_type\": \"BASE\",\n  \"last_scanned_commit\": \"testcommit12345\",\n  \"timestamp\": \"2023-01-30T22:51:31.486Z\",\n  \"increment_number\": 0,\n  \"rule_pack\": \"1.0.0\",\n  \"repository_id\": {{repository_id}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id"
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "999"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Update a scan with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.enum\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid enumeration member; permitted: 'BASE', 'INCREMENTAL'\");",
											"",
											"    pm.expect(responseJson[\"detail\"][1][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][1][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"",
											"    pm.expect(responseJson[\"detail\"][2][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][2][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scan_type\": \"TEST\",\n  \"last_scanned_commit\": \"testcommit12345\",\n  \"timestamp\": \"2023-01-30T22:51:31.486Z\",\n  \"increment_number\": \"one\",\n  \"rule_pack\": 1,\n  \"repository_id\": \"str\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id"
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "999"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Get scan findings associated with a scan ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"].length).to.eql(0);",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id/findings?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id",
										"findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings associated with a non existent scan ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\").that.is.empty;;",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id/findings?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id",
										"findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings associated with an invalid scan id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id/findings?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id",
										"findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings associated with a scan ID with rule filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"].length).to.eql(0);",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id/findings?skip=0&limit=100&rule=rule1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id",
										"findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "rule",
											"value": "rule1"
										}
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings associated with a scan ID with non existent rule filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\").that.is.empty;",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id/findings?skip=0&limit=100&rule=notexistent",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id",
										"findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "rule",
											"value": "notexistent"
										}
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings associated with a scan ID with status filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"].length).to.eql(0);",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id/findings?skip=0&limit=100&status=NOT_ANALYZED",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id",
										"findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "status",
											"value": "NOT_ANALYZED"
										}
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings associated with a scan ID with rule and status filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"].length).to.eql(0);",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id/findings?skip=0&limit=100&rule=rule1&status=NOT_ANALYZED",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id",
										"findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "rule",
											"value": "rule1"
										},
										{
											"key": "status",
											"value": "NOT_ANALYZED"
										}
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Create scan findings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status is Created\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Created\")",
											"}",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"file_path\": \"dummy_file.txt\",\n    \"line_number\": 10,\n    \"column_start\": 1,\n    \"column_end\": 8,\n    \"commit_id\": \"testcommit12345\",\n    \"commit_message\": \"test commit message\",\n    \"commit_timestamp\": \"2023-01-30T23:18:24.546Z\",\n    \"author\": \"test-author\",\n    \"email\": \"test-author@mail.com\",\n    \"status\": \"NOT_ANALYZED\",\n    \"comment\": \"\",\n    \"event_sent_on\": null,\n    \"rule_name\": \"Rule-1\",\n    \"repository_id\": {{repository_id}}\n  }\n\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id/findings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id",
										"findings"
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Create scan findings with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"file_path\": \"dummy_file.txt\",\n    \"line_number\": 10,\n    \"column_start\": 1,\n    \"column_end\": 8,\n    \"commit_id\": \"testcommit12345\",\n    \"commit_message\": \"test commit message\",\n    \"commit_timestamp\": \"2023-01-30T23:18:24.546Z\",\n    \"author\": \"test-author\",\n    \"email\": \"test-author@mail.com\",\n    \"event_sent_on\": null,\n    \"rule_name\": \"Rule-1\",\n    \"repository_id\": \"str\"\n  }\n\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id/findings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id",
										"findings"
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Get scan findings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][0][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][0][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][0][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_timestamp\"]).to.eql(\"2023-01-30T23:18:24.547000\");",
											"    pm.expect(responseJson[\"data\"][0][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][0][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][0][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][0][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_id\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][0][\"scan_ids\"]).to.eql(null);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										"findings",
										""
									],
									"query": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings with non existent scan id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\").that.is.empty;;",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/findings/?scan_id=999&skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										"findings",
										""
									],
									"query": [
										{
											"key": "scan_id",
											"value": "999"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings with invalid scan id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/findings/?scan_id=invalid&skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										"findings",
										""
									],
									"query": [
										{
											"key": "scan_id",
											"value": "invalid"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings with rule filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][0][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][0][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][0][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_timestamp\"]).to.eql(\"2023-01-30T23:18:24.547000\");",
											"    pm.expect(responseJson[\"data\"][0][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][0][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][0][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][0][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_id\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][0][\"scan_ids\"]).to.eql(null);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100&rule=Rule-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										"findings",
										""
									],
									"query": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "rule",
											"value": "Rule-1"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings with rule filter with non existent scan id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\").that.is.empty;;",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/findings/?scan_id=999&skip=0&limit=100&rule=Rule-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										"findings",
										""
									],
									"query": [
										{
											"key": "scan_id",
											"value": "999"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "rule",
											"value": "Rule-1"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings with rule filter with non existent rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\").that.is.empty;;",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100&rule=notexists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										"findings",
										""
									],
									"query": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "rule",
											"value": "notexists"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings with status filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][0][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][0][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][0][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_timestamp\"]).to.eql(\"2023-01-30T23:18:24.547000\");",
											"    pm.expect(responseJson[\"data\"][0][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][0][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][0][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][0][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_id\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][0][\"scan_ids\"]).to.eql(null);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100&status=NOT_ANALYZED",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										"findings",
										""
									],
									"query": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "status",
											"value": "NOT_ANALYZED"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings with invalid status filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.enum\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid enumeration member; permitted: 'NOT_ANALYZED', 'UNDER_REVIEW', 'CLARIFICATION_REQUIRED', 'FALSE_POSITIVE', 'TRUE_POSITIVE'\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100&status=invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										"findings",
										""
									],
									"query": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "status",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings with rule and status filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][0][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][0][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][0][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_timestamp\"]).to.eql(\"2023-01-30T23:18:24.547000\");",
											"    pm.expect(responseJson[\"data\"][0][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][0][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][0][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][0][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][0][\"scan_ids\"]).to.eql(null);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100&rule=Rule-1&status=NOT_ANALYZED",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										"findings",
										""
									],
									"query": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "rule",
											"value": "Rule-1"
										},
										{
											"key": "status",
											"value": "NOT_ANALYZED"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get scan findings with invalid rule and status filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.enum\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid enumeration member; permitted: 'NOT_ANALYZED', 'UNDER_REVIEW', 'CLARIFICATION_REQUIRED', 'FALSE_POSITIVE', 'TRUE_POSITIVE'\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100&rule=invalid&status=invalis",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										"findings",
										""
									],
									"query": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "rule",
											"value": "invalid"
										},
										{
											"key": "status",
											"value": "invalis"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get unique rules from scans",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(1);",
											"    pm.expect(responseJson).to.eql([\"Rule-1\"] );",
											"    pm.expect(responseJson).to.include(\"Rule-1\");",
											"});",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/detected-rules/?scan_id={{scan_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										"detected-rules",
										""
									],
									"query": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get unique rules from scans where scan id doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(0);",
											"});",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/detected-rules/?scan_id=999",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										"detected-rules",
										""
									],
									"query": [
										{
											"key": "scan_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get unique rules from scans for invalid scan id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/detected-rules/?scan_id=invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										"detected-rules",
										""
									],
									"query": [
										{
											"key": "scan_id",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Delete a scan which doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Scan not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id"
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						},
						{
							"name": "Delete a scan with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id"
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "one"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						}
					]
				},
				{
					"name": "findings",
					"item": [
						{
							"name": "Create finding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status is Created\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Created\")",
											"}",
											"",
											"pm.test(\"Response body matches\", function() {",
											"    pm.response.to.have.body(\"1\");",
											"    pm.expect(pm.response.text()).to.include(\"1\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n   {\n    \"file_path\": \"dummy_file.txt\",\n    \"line_number\": 10,\n    \"column_start\": 1,\n    \"column_end\": 8,\n    \"commit_id\": \"testcommit12345\",\n    \"commit_message\": \"test commit message\",\n    \"commit_timestamp\": \"2023-01-30T23:18:24.546Z\",\n    \"author\": \"test-author\",\n    \"email\": \"test-author@mail.com\",\n    \"event_sent_on\": null,\n    \"rule_name\": \"GitHub Personal Access Token\",\n    \"repository_id\": {{repository_id}}\n  }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings"
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Create finding with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n   {\n    \"file_path\": \"dummy_file.txt\",\n    \"line_number\": 10,\n    \"column_start\": 1,\n    \"column_end\": 8,\n    \"commit_id\": \"testcommit12345\",\n    \"commit_message\": \"test commit message\",\n    \"commit_timestamp\": \"2023-01-30T23:18:24.546Z\",\n    \"author\": \"test-author\",\n    \"email\": \"test-author@mail.com\",\n    \"event_sent_on\": null,\n    \"rule_name\": \"GitHub Personal Access Token\",\n    \"repository_id\": \"str\"\n  }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings"
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Get all findings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"].length).to.eql(8);",
											"    ",
											"    pm.expect(responseJson[\"data\"][0][\"file_path\"]).to.eql(\"application.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"line_number\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"column_end\"]).to.eql(100);",
											"    pm.expect(responseJson[\"data\"][0][\"commit_id\"]).to.eql(\"qwerty1\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_message\"]).to.eql(\"this is commit 1\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_timestamp\"]).to.include(\"2023-01-01T00:00:00\");",
											"    pm.expect(responseJson[\"data\"][0][\"author\"]).to.eql(\"developer\");",
											"    pm.expect(responseJson[\"data\"][0][\"email\"]).to.eql(\"developer@abc.com\");",
											"    pm.expect(responseJson[\"data\"][0][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][0][\"rule_name\"]).to.eql(\"Google-OAuth-Access-Token\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_id\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"scan_ids\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.be.greaterThan(0);",
											"    pm.environment.set(\"finding_id\", responseJson[\"data\"][0][\"id_\"]);",
											"",
											"",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][1][\"file_path\"]).to.eql(\"application.txt\");",
											"    pm.expect(responseJson[\"data\"][1][\"line_number\"]).to.eql(2);",
											"    pm.expect(responseJson[\"data\"][1][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][1][\"column_end\"]).to.eql(80);",
											"    pm.expect(responseJson[\"data\"][1][\"commit_id\"]).to.eql(\"qwerty1\");",
											"    pm.expect(responseJson[\"data\"][1][\"commit_message\"]).to.eql(\"this is commit 2\");",
											"    pm.expect(responseJson[\"data\"][1][\"commit_timestamp\"]).to.include(\"2023-01-01T00:00:00\");",
											"    pm.expect(responseJson[\"data\"][1][\"author\"]).to.eql(\"developer\");",
											"    pm.expect(responseJson[\"data\"][1][\"email\"]).to.eql(\"developer@abc.com\");",
											"    pm.expect(responseJson[\"data\"][1][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][1][\"rule_name\"]).to.eql(\"Github-Tokens\");",
											"    pm.expect(responseJson[\"data\"][1][\"repository_id\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][1][\"scan_ids\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][1][\"id_\"]).to.be.greaterThan(0);",
											"    pm.environment.set(\"finding_id\", responseJson[\"data\"][1][\"id_\"]);",
											"",
											"",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][7][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][7][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][7][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][7][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][7][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][7][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][7][\"commit_timestamp\"]).to.include(\"2023-01-30T23\");",
											"    pm.expect(responseJson[\"data\"][7][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][7][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][7][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][7][\"rule_name\"]).to.eql(\"GitHub Personal Access Token\");",
											"    pm.expect(responseJson[\"data\"][7][\"repository_id\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson[\"data\"][7][\"scan_ids\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][7][\"id_\"]).to.be.greaterThan(0);",
											"    pm.environment.set(\"finding_id\", responseJson[\"data\"][7][\"id_\"]);",
											"",
											"    pm.expect(responseJson[\"total\"]).to.eql(8);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all detailed findings by rule pack version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"].length).to.eql(3);",
											"",
											"    pm.expect(responseJson[\"data\"][0][\"file_path\"]).to.eql(\"application.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"line_number\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"column_end\"]).to.eql(100);",
											"    pm.expect(responseJson[\"data\"][0][\"commit_id\"]).to.eql(\"qwerty1\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_message\"]).to.eql(\"this is commit 1\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_timestamp\"]).to.include(\"2023-01-01T00:00:00\");",
											"    pm.expect(responseJson[\"data\"][0][\"author\"]).to.eql(\"developer\");",
											"    pm.expect(responseJson[\"data\"][0][\"email\"]).to.eql(\"developer@abc.com\");",
											"    pm.expect(responseJson[\"data\"][0][\"status\"]).to.eql(\"TRUE_POSITIVE\");",
											"    pm.expect(responseJson[\"data\"][0][\"comment\"]).to.eql(\"It is a true positive issue\");",
											"    pm.expect(responseJson[\"data\"][0][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][0][\"project_key\"]).to.eql(\"ado-project1\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_name\"]).to.eql(\"resc-dummy1\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_url\"]).to.eql(\"https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1\");",
											"    pm.expect(responseJson[\"data\"][0][\"timestamp\"]).to.eql(\"2023-07-14T00:00:00\");",
											"    pm.expect(responseJson[\"data\"][0][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][0][\"last_scanned_commit\"]).to.eql(\"qwerty1\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_url\"]).to.eql(\"https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1/commit/qwerty1?path=/application.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"rule_name\"]).to.eql(\"Google-OAuth-Access-Token\");",
											"    pm.expect(responseJson[\"data\"][0][\"rule_pack\"]).to.eql",
											"        (\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][0][\"scan_id\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.eql(1);",
											"",
											"    pm.expect(responseJson[\"data\"][2][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][2][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][2][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][2][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][2][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_timestamp\"]).to.include(\"2023-01-30T23\");",
											"    pm.expect(responseJson[\"data\"][2][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][2][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][2][\"status\"]).to.eql(\"NOT_ANALYZED\");",
											"    pm.expect(responseJson[\"data\"][2][\"comment\"]).to.eql(\"\");",
											"    pm.expect(responseJson[\"data\"][2][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][2][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"data\"][2][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][2][\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][2][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][2][\"rule_pack\"]).to.eql",
											"        (\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][2][\"scan_id\"]).to.eql(5);",
											"    pm.expect(responseJson[\"data\"][2][\"id_\"]).to.eql(7);",
											"",
											"    pm.expect(responseJson[\"total\"]).to.eql(3);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings?skip=0&limit=100&rule_pack_versions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "rule_pack_versions",
											"value": null
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all findings with invalid parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"",
											"    pm.expect(responseJson[\"detail\"][1][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][1][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings?skip=invalid&limit=invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "invalid"
										},
										{
											"key": "limit",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Fetch a finding by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"rule_name\"]).to.eql(\"GitHub Personal Access Token\");",
											"    pm.expect(responseJson[\"repository_id\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson[\"id_\"]).to.eql(pm.environment.get(\"finding_id\"));",
											"    pm.expect(responseJson[\"scan_ids\"]).to.be.an(\"array\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/:finding_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										":finding_id"
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "{{finding_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Fetch a finding by invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/:finding_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										":finding_id"
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Fetch a finding by non existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Finding not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/:finding_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										":finding_id"
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get findings by rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"].length).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][0][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][0][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][0][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][0][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][0][\"rule_name\"]).to.eql(\"GitHub Personal Access Token\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_id\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.eql(pm.environment.get(\"finding_id\"));",
											"    pm.expect(responseJson[\"data\"][0][\"scan_ids\"]).to.eql(null);",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/by-rule/GitHub%20Personal%20Access%20Token?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"by-rule",
										"GitHub%20Personal%20Access%20Token"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get findings by rule with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/by-rule/GitHub%20Personal%20Access%20Token?skip=invalid&limit=invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"by-rule",
										"GitHub%20Personal%20Access%20Token"
									],
									"query": [
										{
											"key": "skip",
											"value": "invalid"
										},
										{
											"key": "limit",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get findings by rule with non existent rule name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\").that.is.empty;;",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/by-rule/notexists?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"by-rule",
										"notexists"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get total findings count by rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(pm.response.text()).to.include(1);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/total-count-by-rule/GitHub%20Personal%20Access%20Token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"total-count-by-rule",
										"GitHub%20Personal%20Access%20Token"
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get total findings count by rule with non existent rule name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(pm.response.text()).to.include(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/total-count-by-rule/notexists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"total-count-by-rule",
										"notexists"
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all supported statuses for findings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(5);",
											"    pm.expect(responseJson).to.eql([ \"NOT_ANALYZED\", \"UNDER_REVIEW\", \"CLARIFICATION_REQUIRED\", \"FALSE_POSITIVE\", \"TRUE_POSITIVE\" ] );",
											"    pm.expect(responseJson).to.include(\"NOT_ANALYZED\");",
											"    pm.expect(responseJson).to.include(\"UNDER_REVIEW\");",
											"    pm.expect(responseJson).to.include(\"CLARIFICATION_REQUIRED\");",
											"    pm.expect(responseJson).to.include(\"FALSE_POSITIVE\");",
											"    pm.expect(responseJson).to.include(\"TRUE_POSITIVE\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/supported-statuses/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"supported-statuses",
										""
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all the findings by time period - month",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    responseJson[\"data\"].forEach((obj) => {",
											"        pm.expect(obj).to.have.property('date_lable');",
											"        pm.expect(obj).to.have.property('finding_count');",
											"    });",
											"    pm.expect(responseJson).to.have.property(\"total\");",
											"    pm.expect(responseJson).to.have.property(\"limit\");",
											"    pm.expect(responseJson).to.have.property(\"skip\");",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/count-by-time/month?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"count-by-time",
										"month"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all the findings by time period - month with invalid paramters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"    pm.expect(responseJson[\"detail\"][1][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][1][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/count-by-time/month?skip=invalid&limit=invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"count-by-time",
										"month"
									],
									"query": [
										{
											"key": "skip",
											"value": "invalid"
										},
										{
											"key": "limit",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all the findings by time period - week",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"currentDate = new Date();",
											"startDate = new Date(currentDate.getFullYear(), 0, 1);",
											"var days = Math.floor((currentDate - startDate) /",
											"    (24 * 60 * 60 * 1000));",
											"var weekNumber = Math.ceil(days / 7);",
											"",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"].length).to.eql(2);",
											"    pm.expect(responseJson[\"data\"][0][\"finding_count\"]).to.eql(6);",
											"    pm.expect(responseJson[\"data\"][1][\"date_lable\"]).to.include(\"W\"+weekNumber);",
											"    pm.expect(responseJson[\"data\"][1][\"finding_count\"]).to.eql(1);",
											"",
											"    pm.expect(responseJson[\"total\"]).to.eql(2);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/count-by-time/week?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"count-by-time",
										"week"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all the findings by time period - week with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"    pm.expect(responseJson[\"detail\"][1][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][1][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/count-by-time/week?skip=invalid&limit=invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"count-by-time",
										"week"
									],
									"query": [
										{
											"key": "skip",
											"value": "invalid"
										},
										{
											"key": "limit",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all the findings by time period - day",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"].length).to.eql(2);",
											"    pm.expect(responseJson[\"data\"][0][\"date_lable\"]).to.include(\"2023-7-14\");",
											"    pm.expect(responseJson[\"data\"][0][\"finding_count\"]).to.eql(6);",
											"    pm.expect(responseJson[\"data\"][1][\"date_lable\"]).to.include(pm.environment.get(\"currentdate\").substring(0, 3));",
											"    pm.expect(responseJson[\"data\"][1][\"finding_count\"]).to.eql(1);",
											"    pm.expect(responseJson[\"total\"]).to.eql(3);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/count-by-time/day?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"count-by-time",
										"day"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all the findings by time period - day with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"    pm.expect(responseJson[\"detail\"][1][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][1][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/count-by-time/day?skip=invalid&limit=invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"count-by-time",
										"day"
									],
									"query": [
										{
											"key": "skip",
											"value": "invalid"
										},
										{
											"key": "limit",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Audit single/multiple findings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status is Created\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Created\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.response.to.have.body(\"1\");",
											"    pm.expect(pm.response.text()).to.include(\"1\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"finding_ids\": [\n    {{finding_id}}\n  ],\n  \"status\": \"NOT_ANALYZED\",\n  \"comment\": \"Audited\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/audit/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"audit",
										""
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Audit single/multiple findings with non existent finding id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Finding 999 not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"finding_ids\": [\n    999\n  ],\n  \"status\": \"NOT_ANALYZED\",\n  \"comment\": \"Audited\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/audit/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"audit",
										""
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Audit single/multiple findings with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"    pm.expect(responseJson[\"detail\"][1][\"type\"]).to.eql(\"type_error.enum\");",
											"    pm.expect(responseJson[\"detail\"][1][\"msg\"]).to.eql(\"value is not a valid enumeration member; permitted: 'NOT_ANALYZED', 'UNDER_REVIEW', 'CLARIFICATION_REQUIRED', 'FALSE_POSITIVE', 'TRUE_POSITIVE'\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"finding_ids\": [\n    \"test\"\n  ],\n  \"status\": \"test status\",\n  \"comment\": \"Audited\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/audit/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										"audit",
										""
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Delete a finding which doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Finding not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/:finding_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										":finding_id"
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						},
						{
							"name": "Delete a finding with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/:finding_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										":finding_id"
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "one"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						},
						{
							"name": "Partially update a finding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");     ",
											"    pm.expect(responseJson[\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"event_sent_on\"]).to.include(\"2023-01-31T13\");",
											"    pm.expect(responseJson[\"rule_name\"]).to.eql(\"GitHub Personal Access Token\");",
											"    pm.expect(responseJson[\"repository_id\"]).to.eql(pm.environment.get(\"repository_id\"));",
											"    pm.expect(responseJson[\"id_\"]).to.eql(pm.environment.get(\"finding_id\"));",
											"    pm.expect(responseJson[\"scan_ids\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"scan_ids\"].length).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"event_sent_on\": \"2023-01-31T13:31:25.388Z\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/:finding_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										":finding_id"
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "{{finding_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Partially update a finding with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"value_error.datetime\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"invalid datetime format\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"event_sent_on\": \"2023-01-31\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/:finding_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										":finding_id"
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "{{finding_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Partially update a finding with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"event_sent_on\": \"2023-01-31T13:31:25.388Z\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/:finding_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										":finding_id"
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "str"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Partially update a finding with non existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Finding not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"event_sent_on\": \"2023-01-31T13:31:25.388Z\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/:finding_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										":finding_id"
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "999"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"project_key\": \"sed magna pa\",\n \"repository_id\": \"ut incididunt cupidatat Lorem ad\",\n \"repository_name\": \"aliqua\",\n \"repository_url\": \"pariatur consequat qui fugiat\",\n \"vcs_provider\": \"Exc\",\n \"id_\": 78011707\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"project_key\": \"commodo do labore\",\n    \"repository_id\": \"non qui e\",\n    \"repository_name\": \"officia fugiat dolore in\",\n    \"repository_url\": \"enim Lorem ea\",\n    \"vcs_provider\": \"officia cupidatat dolor non\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sts/v1/repositories-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"repositories-info"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detail\": [\n  {\n   \"loc\": [\n    \"id deserunt\",\n    \"elit voluptate qui cupidatat magna\"\n   ],\n   \"msg\": \"ad adipisicing\",\n   \"type\": \"mollit\"\n  },\n  {\n   \"loc\": [\n    \"adipisicing et ut Ut\",\n    \"cillum culpa\"\n   ],\n   \"msg\": \"amet occaecat deserunt ex\",\n   \"type\": \"ad cupidatat in\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Get audit(s) for finding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    let today = new Date().toISOString().slice(0, 10)",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.eql(3);",
											"    pm.expect(responseJson[\"data\"][0][\"status\"]).to.eql(\"NOT_ANALYZED\");",
											"    pm.expect(responseJson[\"data\"][0][\"auditor\"]).to.eql(\"Anonymous\");",
											"    pm.expect(responseJson[\"data\"][0][\"comment\"]).to.eql(\"Audited\");",
											"    pm.expect(responseJson[\"data\"][0][\"timestamp\"]).to.include(today);",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/:finding_id/audit?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										":finding_id",
										"audit"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "{{finding_id}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get audit(s) for finding by non existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.eql([]);",
											"    pm.expect(responseJson[\"total\"]).to.eql(0);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/:finding_id/audit?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										":finding_id",
										"audit"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get audit(s) for finding by invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/:finding_id/audit?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										":finding_id",
										"audit"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all detailed findings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][2][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][2][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][2][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][2][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][2][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_timestamp\"]).to.include(\"2023-01-30T23\");",
											"    pm.expect(responseJson[\"data\"][2][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][2][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][2][\"status\"]).to.eql(\"NOT_ANALYZED\");",
											"    pm.expect(responseJson[\"data\"][2][\"comment\"]).to.eql(\"\");",
											"    pm.expect(responseJson[\"data\"][2][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][2][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][2][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"data\"][2][\"timestamp\"].substring(0, 10)).to.eql(pm.environment.get(\"currentdate\").substring(0, 10));",
											"    pm.expect(responseJson[\"data\"][2][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][2][\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][2][\"scan_id\"]).to.eql(pm.environment.get(\"scan_id\"));",
											"    pm.expect(responseJson[\"data\"][2][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][2][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][2][\"id_\"]).to.eql(7);",
											"    pm.expect(responseJson[\"total\"]).to.eql(3);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all detailed findings with rule filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][0]).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][0][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][0][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][0][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_timestamp\"]).to.include(\"2023-01-30T23\");",
											"    pm.expect(responseJson[\"data\"][0][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][0][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][0][\"status\"]).to.eql(\"NOT_ANALYZED\");",
											"    pm.expect(responseJson[\"data\"][0][\"comment\"]).to.eql(\"\");",
											"    pm.expect(responseJson[\"data\"][0][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][0][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][0][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"data\"][0][\"timestamp\"].substring(0, 10)).to.eql(pm.environment.get(\"currentdate\").substring(0, 10));",
											"    pm.expect(responseJson[\"data\"][0][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][0][\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"scan_id\"]).to.eql(pm.environment.get(\"scan_id\"));",
											"    pm.expect(responseJson[\"data\"][0][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.eql(7);",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings?skip=0&limit=100&query_string=rule_names=[\"Rule-1\"]",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "query_string",
											"value": "rule_names=[\"Rule-1\"]"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all detailed findings with status filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][1]).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][1][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][1][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][1][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][1][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][1][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][1][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][1][\"commit_timestamp\"]).to.include(\"2023-01-30T23\");",
											"    pm.expect(responseJson[\"data\"][1][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][1][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][1][\"status\"]).to.eql(\"NOT_ANALYZED\");",
											"    pm.expect(responseJson[\"data\"][1][\"comment\"]).to.eql(\"\");",
											"    pm.expect(responseJson[\"data\"][1][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][1][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][1][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"data\"][1][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"data\"][1][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"data\"][1][\"timestamp\"].substring(0, 10)).to.eql(pm.environment.get(\"currentdate\").substring(0, 10));",
											"    pm.expect(responseJson[\"data\"][1][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][1][\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][1][\"commit_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][1][\"scan_id\"]).to.eql(pm.environment.get(\"scan_id\"));",
											"    pm.expect(responseJson[\"data\"][1][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][1][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][1][\"id_\"]).to.eql(7);",
											"    pm.expect(responseJson[\"total\"]).to.eql(2);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings?skip=0&limit=100&query_string=finding_statuses=[\"NOT_ANALYZED\"]",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "query_string",
											"value": "finding_statuses=[\"NOT_ANALYZED\"]"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all detailed findings with rule pack filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][2]).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][2][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][2][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][2][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][2][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][2][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_timestamp\"]).to.include(\"2023-01-30T23\");",
											"    pm.expect(responseJson[\"data\"][2][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][2][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][2][\"status\"]).to.eql(\"NOT_ANALYZED\");",
											"    pm.expect(responseJson[\"data\"][2][\"comment\"]).to.eql(\"\");",
											"    pm.expect(responseJson[\"data\"][2][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][2][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][2][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"data\"][2][\"timestamp\"].substring(0, 10)).to.eql(pm.environment.get(\"currentdate\").substring(0, 10));",
											"    pm.expect(responseJson[\"data\"][2][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][2][\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][2][\"scan_id\"]).to.eql(pm.environment.get(\"scan_id\"));",
											"    pm.expect(responseJson[\"data\"][2][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][2][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][2][\"id_\"]).to.eql(7);",
											"    pm.expect(responseJson[\"total\"]).to.eql(3);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings?skip=0&limit=100&query_string=rule_pack_versions=[\"1.0.0\"]",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "query_string",
											"value": "rule_pack_versions=[\"1.0.0\"]"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all detailed findings with vcs provider filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][2]).to.be.an(\"object\");",
											"        pm.expect(responseJson[\"data\"][0]).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][2][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][2][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][2][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][2][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][2][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_timestamp\"]).to.include(\"2023-01-30T23\");",
											"    pm.expect(responseJson[\"data\"][2][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][2][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][2][\"status\"]).to.eql(\"NOT_ANALYZED\");",
											"    pm.expect(responseJson[\"data\"][2][\"comment\"]).to.eql(\"\");",
											"    pm.expect(responseJson[\"data\"][2][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][2][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][2][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"data\"][2][\"timestamp\"].substring(0, 10)).to.eql(pm.environment.get(\"currentdate\").substring(0, 10));",
											"    pm.expect(responseJson[\"data\"][2][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][2][\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][2][\"scan_id\"]).to.eql(pm.environment.get(\"scan_id\"));",
											"    pm.expect(responseJson[\"data\"][2][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][2][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][2][\"id_\"]).to.eql(7);",
											"    pm.expect(responseJson[\"total\"]).to.eql(3);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings?skip=0&limit=100&query_string=vcs_providers=[\"AZURE_DEVOPS\"]",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "query_string",
											"value": "vcs_providers=[\"AZURE_DEVOPS\"]"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all detailed findings with project name filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][0]).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][0][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][0][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][0][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_timestamp\"]).to.include(\"2023-01-30T23\");",
											"    pm.expect(responseJson[\"data\"][0][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][0][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][0][\"status\"]).to.eql(\"NOT_ANALYZED\");",
											"    pm.expect(responseJson[\"data\"][0][\"comment\"]).to.eql(\"\");",
											"    pm.expect(responseJson[\"data\"][0][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][0][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][0][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"data\"][0][\"timestamp\"].substring(0, 10)).to.eql(pm.environment.get(\"currentdate\").substring(0, 10));",
											"    pm.expect(responseJson[\"data\"][0][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][0][\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"scan_id\"]).to.eql(pm.environment.get(\"scan_id\"));",
											"    pm.expect(responseJson[\"data\"][0][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.eql(7);",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings?skip=0&limit=100&query_string=project_name=test-project",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "query_string",
											"value": "project_name=test-project"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all detailed findings with repository name filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][0]).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][0][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][0][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][0][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_timestamp\"]).to.include(\"2023-01-30T23\");",
											"    pm.expect(responseJson[\"data\"][0][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][0][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][0][\"status\"]).to.eql(\"NOT_ANALYZED\");",
											"    pm.expect(responseJson[\"data\"][0][\"comment\"]).to.eql(\"\");",
											"    pm.expect(responseJson[\"data\"][0][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][0][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][0][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"data\"][0][\"timestamp\"].substring(0, 10)).to.eql(pm.environment.get(\"currentdate\").substring(0, 10));",
											"    pm.expect(responseJson[\"data\"][0][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][0][\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"scan_id\"]).to.eql(pm.environment.get(\"scan_id\"));",
											"    pm.expect(responseJson[\"data\"][0][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.eql(7);",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings?skip=0&limit=100&query_string=repository_name=test-repository",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "query_string",
											"value": "repository_name=test-repository"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all detailed findings with scan  start date filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][2]).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][2][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][2][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][2][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][2][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][2][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_timestamp\"]).to.include(\"2023-01-30T23\");",
											"    pm.expect(responseJson[\"data\"][2][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][2][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][2][\"status\"]).to.eql(\"NOT_ANALYZED\");",
											"    pm.expect(responseJson[\"data\"][2][\"comment\"]).to.eql(\"\");",
											"    pm.expect(responseJson[\"data\"][2][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][2][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][2][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"data\"][2][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][2][\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][2][\"scan_id\"]).to.eql(pm.environment.get(\"scan_id\"));",
											"    pm.expect(responseJson[\"data\"][2][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][2][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][2][\"id_\"]).to.eql(7);",
											"    pm.expect(responseJson[\"total\"]).to.eql(3);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings?skip=0&limit=100&query_string=start_date_time=2020-04-13T00:00:00",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "query_string",
											"value": "start_date_time=2020-04-13T00:00:00"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all detailed findings with scan  start date and end date filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][2]).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][2][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][2][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][2][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][2][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][2][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_timestamp\"]).to.include(\"2023-01-30T23\");",
											"    pm.expect(responseJson[\"data\"][2][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][2][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][2][\"status\"]).to.eql(\"NOT_ANALYZED\");",
											"    pm.expect(responseJson[\"data\"][2][\"comment\"]).to.eql(\"\");",
											"    pm.expect(responseJson[\"data\"][2][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][2][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][2][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"data\"][2][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"data\"][2][\"timestamp\"].substring(0, 10)).to.eql(pm.environment.get(\"currentdate\").substring(0, 10));",
											"    pm.expect(responseJson[\"data\"][2][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][2][\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][2][\"commit_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][2][\"scan_id\"]).to.eql(pm.environment.get(\"scan_id\"));",
											"    pm.expect(responseJson[\"data\"][2][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][2][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][2][\"id_\"]).to.eql(7);",
											"",
											"    pm.expect(responseJson[\"total\"]).to.eql(3);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let today = new Date();",
											"today.setDate(today.getDate() + 1);",
											"end_date_time = today.toISOString().split('T')[0]+'T00:00:00';",
											"pm.environment.set('end_date_time', end_date_time);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings?skip=0&limit=100&query_string=start_date_time=2020-04-13T00:00:00%26end_date_time={{end_date_time}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "query_string",
											"value": "start_date_time=2020-04-13T00:00:00%26end_date_time={{end_date_time}}"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get all detailed findings with all filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"]).to.be.an(\"array\");",
											"    pm.expect(responseJson[\"data\"][0]).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"data\"][0][\"file_path\"]).to.eql(\"dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"line_number\"]).to.eql(10);",
											"    pm.expect(responseJson[\"data\"][0][\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"data\"][0][\"column_end\"]).to.eql(8);",
											"    pm.expect(responseJson[\"data\"][0][\"commit_id\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_message\"]).to.eql(\"test commit message\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_timestamp\"]).to.include(\"2023-01-30T23\");",
											"    pm.expect(responseJson[\"data\"][0][\"author\"]).to.eql(\"test-author\");",
											"    pm.expect(responseJson[\"data\"][0][\"email\"]).to.eql(\"test-author@mail.com\");",
											"    pm.expect(responseJson[\"data\"][0][\"status\"]).to.eql(\"NOT_ANALYZED\");",
											"    pm.expect(responseJson[\"data\"][0][\"comment\"]).to.eql(\"\");",
											"    pm.expect(responseJson[\"data\"][0][\"rule_name\"]).to.eql(\"Rule-1\");",
											"    pm.expect(responseJson[\"data\"][0][\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"data\"][0][\"project_key\"]).to.eql(\"test-project\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_name\"]).to.eql(\"test-repository\");",
											"    pm.expect(responseJson[\"data\"][0][\"repository_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository\");",
											"    pm.expect(responseJson[\"data\"][0][\"timestamp\"].substring(0, 10)).to.eql(pm.environment.get(\"currentdate\").substring(0, 10));",
											"    pm.expect(responseJson[\"data\"][0][\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"data\"][0][\"last_scanned_commit\"]).to.eql(\"testcommit12345\");",
											"    pm.expect(responseJson[\"data\"][0][\"commit_url\"]).to.eql(\"https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt\");",
											"    pm.expect(responseJson[\"data\"][0][\"scan_id\"]).to.eql(pm.environment.get(\"scan_id\"));",
											"    pm.expect(responseJson[\"data\"][0][\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"data\"][0][\"id_\"]).to.eql(7);",
											"    pm.expect(responseJson[\"total\"]).to.eql(1);",
											"    pm.expect(responseJson[\"limit\"]).to.eql(100);",
											"    pm.expect(responseJson[\"skip\"]).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let today = new Date();",
											"today.setDate(today.getDate() + 1);",
											"end_date_time = today.toISOString().split('T')[0]+'T00:00:00';",
											"pm.environment.set('end_date_time', end_date_time);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings?skip=0&limit=100&query_string=rule_names=[\"Rule-1\"]%26finding_statuses=[\"NOT_ANALYZED\"]%26vcs_providers=[\"AZURE_DEVOPS\"]%26project_name=test-project%26repository_name=test-repository%26start_date_time=2020-04-13T00:00:00%26end_date_time={{end_date_time}}%26rule_pack_versions=[\"1.0.0\"]",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "query_string",
											"value": "rule_names=[\"Rule-1\"]%26finding_statuses=[\"NOT_ANALYZED\"]%26vcs_providers=[\"AZURE_DEVOPS\"]%26project_name=test-project%26repository_name=test-repository%26start_date_time=2020-04-13T00:00:00%26end_date_time={{end_date_time}}%26rule_pack_versions=[\"1.0.0\"]"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get detailed finding by its ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"file_path\"]).to.eql(\"application.txt\");",
											"    pm.expect(responseJson[\"line_number\"]).to.eql(1);",
											"    pm.expect(responseJson[\"column_start\"]).to.eql(1);",
											"    pm.expect(responseJson[\"column_end\"]).to.eql(100);",
											"    pm.expect(responseJson[\"commit_id\"]).to.eql(\"qwerty1\");",
											"    pm.expect(responseJson[\"commit_message\"]).to.eql(\"this is commit 1\");",
											"    pm.expect(responseJson[\"commit_timestamp\"]).to.include(\"2023-01-01\");",
											"    pm.expect(responseJson[\"author\"]).to.eql(\"developer\");",
											"    pm.expect(responseJson[\"email\"]).to.eql(\"developer@abc.com\");",
											"    pm.expect(responseJson[\"status\"]).to.eql(\"TRUE_POSITIVE\");",
											"    pm.expect(responseJson[\"comment\"]).to.eql(\"It is a true positive issue\");",
											"    pm.expect(responseJson[\"rule_name\"]).to.eql(\"Google-OAuth-Access-Token\");",
											"    pm.expect(responseJson[\"rule_pack\"]).to.eql(\"1.0.0\");",
											"    pm.expect(responseJson[\"project_key\"]).to.eql(\"ado-project1\");",
											"    pm.expect(responseJson[\"repository_name\"]).to.eql(\"resc-dummy1\");",
											"    pm.expect(responseJson[\"repository_url\"]).to.eql(\"https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1\");",
											"    // pm.expect(responseJson[\"timestamp\"].to.eql(\"2023-07-14T00:00:00\"));",
											"    pm.expect(responseJson[\"vcs_provider\"]).to.eql(\"AZURE_DEVOPS\");",
											"    pm.expect(responseJson[\"last_scanned_commit\"]).to.eql(\"qwerty1\");",
											"    pm.expect(responseJson[\"scan_id\"]).to.eql(1);",
											"    pm.expect(responseJson[\"event_sent_on\"]).to.eql(null);",
											"    pm.expect(responseJson[\"commit_url\"]).to.eql(\"https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1/commit/qwerty1?path=/application.txt\");",
											"    pm.expect(responseJson[\"id_\"]).to.be.greaterThan(0);",
											"    pm.expect(responseJson[\"id_\"]).to.eql(1);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings/:finding_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings",
										":finding_id"
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "1"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get detailed finding by non existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status is Not Found\"), function (){",
											"    pm.response.to.have.property(\"status\",\" Not Found\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"]).to.eql(\"Finding not found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings/:finding_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings",
										":finding_id"
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "999"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						},
						{
							"name": "Get detailed finding by invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Status is Unprocessable Entity\"), function (){",
											"    pm.response.to.have.property(\"status\",\"Unprocessable Entity\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"detail\"][0][\"type\"]).to.eql(\"type_error.integer\");",
											"    pm.expect(responseJson[\"detail\"][0][\"msg\"]).to.eql(\"value is not a valid integer\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detailed-findings/:finding_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detailed-findings",
										":finding_id"
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all supported vcs providers\n:return: List[str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/supported-vcs-providers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"supported-vcs-providers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"in ea occaecat\",\n \"Excepteur dolor culpa occaecat eiusmod\"\n]"
								}
							]
						}
					]
				},
				{
					"name": "rules",
					"item": [
						{
							"name": "Get unique rules from findings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(4);",
											"    pm.expect(responseJson).to.eql([\"GitHub Personal Access Token\",\"Github-Tokens\",\"Google-OAuth-Access-Token\",\"Rule-1\"] );",
											"    pm.expect(responseJson).to.include(\"GitHub Personal Access Token\");",
											"    pm.expect(responseJson).to.include(\"Github-Tokens\");",
											"    pm.expect(responseJson).to.include(\"Google-OAuth-Access-Token\");",
											"    pm.expect(responseJson).to.include(\"Rule-1\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detected-rules",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detected-rules"
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						},
						{
							"name": "Get unique rules from rule-pack",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(3);",
											"    pm.expect(responseJson).to.eql([\"Github-Tokens\",\"Google-OAuth-Access-Token\",\"Rule-1\"] );",
											"    pm.expect(responseJson).to.include(\"Github-Tokens\");",
											"    pm.expect(responseJson).to.include(\"Google-OAuth-Access-Token\");",
											"    pm.expect(responseJson).to.include(\"Rule-1\");",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/detected-rules?rule_pack_version=1.0.0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"detected-rules"
									],
									"query": [
										{
											"key": "rule_pack_version",
											"value": "1.0.0"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						},
						{
							"name": "Get detected rules with counts per status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"",
											"    responseJson.forEach((obj) => {",
											"    \tif (obj.rule_name === \"Rule-1\"){",
											"            pm.expect(obj.rule_name).to.eql(\"Rule-1\");",
											"            pm.expect(obj.finding_count).to.eql(1);",
											"            obj.finding_statuses_count.forEach((statusObj) => {",
											"                if(statusObj.status === \"TRUE_POSITIVE\"){",
											"                    pm.expect(statusObj.status).to.eql(\"TRUE_POSITIVE\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"FALSE_POSITIVE\"){",
											"                    pm.expect(statusObj.status).to.eql(\"FALSE_POSITIVE\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"NOT_ANALYZED\"){",
											"                    pm.expect(statusObj.status).to.eql(\"NOT_ANALYZED\");",
											"                    pm.expect(statusObj.count).to.eql(1);",
											"                }",
											"                if(statusObj.status === \"UNDER_REVIEW\"){",
											"                    pm.expect(statusObj.status).to.eql(\"UNDER_REVIEW\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"CLARIFICATION_REQUIRED\"){",
											"                    pm.expect(statusObj.status).to.eql(\"CLARIFICATION_REQUIRED\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"            });",
											"        }",
											"",
											"        if (obj.rule_name === \"GitHub Personal Access Token\"){",
											"            pm.expect(obj.rule_name).to.eql(\"GitHub Personal Access Token\");",
											"            pm.expect(obj.finding_count).to.eql(1);",
											"            obj.finding_statuses_count.forEach((statusObj) => {",
											"                if(statusObj.status === \"TRUE_POSITIVE\"){",
											"                    pm.expect(statusObj.status).to.eql(\"TRUE_POSITIVE\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"FALSE_POSITIVE\"){",
											"                    pm.expect(statusObj.status).to.eql(\"FALSE_POSITIVE\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"NOT_ANALYZED\"){",
											"                    pm.expect(statusObj.status).to.eql(\"NOT_ANALYZED\");",
											"                    pm.expect(statusObj.count).to.eql(1);",
											"                }",
											"                if(statusObj.status === \"UNDER_REVIEW\"){",
											"                    pm.expect(statusObj.status).to.eql(\"UNDER_REVIEW\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"CLARIFICATION_REQUIRED\"){",
											"                    pm.expect(statusObj.status).to.eql(\"CLARIFICATION_REQUIRED\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"            });",
											"        }",
											"",
											"    });",
											"",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rules/finding-status-count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rules",
										"finding-status-count"
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						},
						{
							"name": "Get detected rules with counts per status with single rule pack in filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"",
											"    responseJson.forEach((obj) => {",
											"    \tif (obj.rule_name === \"Rule-1\"){",
											"            pm.expect(obj.rule_name).to.eql(\"Rule-1\");",
											"            pm.expect(obj.finding_count).to.eql(1);",
											"            obj.finding_statuses_count.forEach((statusObj) => {",
											"                if(statusObj.status === \"TRUE_POSITIVE\"){",
											"                    pm.expect(statusObj.status).to.eql(\"TRUE_POSITIVE\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"FALSE_POSITIVE\"){",
											"                    pm.expect(statusObj.status).to.eql(\"FALSE_POSITIVE\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"NOT_ANALYZED\"){",
											"                    pm.expect(statusObj.status).to.eql(\"NOT_ANALYZED\");",
											"                    pm.expect(statusObj.count).to.eql(1);",
											"                }",
											"                if(statusObj.status === \"UNDER_REVIEW\"){",
											"                    pm.expect(statusObj.status).to.eql(\"UNDER_REVIEW\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"CLARIFICATION_REQUIRED\"){",
											"                    pm.expect(statusObj.status).to.eql(\"CLARIFICATION_REQUIRED\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"            });",
											"        }",
											"",
											"        if (obj.rule_name === \"GitHub Personal Access Token\"){",
											"            pm.expect(obj.rule_name).to.eql(\"GitHub Personal Access Token\");",
											"            pm.expect(obj.finding_count).to.eql(1);",
											"            obj.finding_statuses_count.forEach((statusObj) => {",
											"                if(statusObj.status === \"TRUE_POSITIVE\"){",
											"                    pm.expect(statusObj.status).to.eql(\"TRUE_POSITIVE\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"FALSE_POSITIVE\"){",
											"                    pm.expect(statusObj.status).to.eql(\"FALSE_POSITIVE\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"NOT_ANALYZED\"){",
											"                    pm.expect(statusObj.status).to.eql(\"NOT_ANALYZED\");",
											"                    pm.expect(statusObj.count).to.eql(1);",
											"                }",
											"                if(statusObj.status === \"UNDER_REVIEW\"){",
											"                    pm.expect(statusObj.status).to.eql(\"UNDER_REVIEW\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"CLARIFICATION_REQUIRED\"){",
											"                    pm.expect(statusObj.status).to.eql(\"CLARIFICATION_REQUIRED\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"            });",
											"        }",
											"",
											"    });",
											"",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rules/finding-status-count?rule_pack_version=1.0.0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rules",
										"finding-status-count"
									],
									"query": [
										{
											"key": "rule_pack_version",
											"value": "1.0.0"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						},
						{
							"name": "Get detected rules with counts per status with multiple rule packs in filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"",
											"    responseJson.forEach((obj) => {",
											"    \tif (obj.rule_name === \"Rule-1\"){",
											"            pm.expect(obj.rule_name).to.eql(\"Rule-1\");",
											"            pm.expect(obj.finding_count).to.eql(1);",
											"            obj.finding_statuses_count.forEach((statusObj) => {",
											"                if(statusObj.status === \"TRUE_POSITIVE\"){",
											"                    pm.expect(statusObj.status).to.eql(\"TRUE_POSITIVE\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"FALSE_POSITIVE\"){",
											"                    pm.expect(statusObj.status).to.eql(\"FALSE_POSITIVE\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"NOT_ANALYZED\"){",
											"                    pm.expect(statusObj.status).to.eql(\"NOT_ANALYZED\");",
											"                    pm.expect(statusObj.count).to.eql(1);",
											"                }",
											"                if(statusObj.status === \"UNDER_REVIEW\"){",
											"                    pm.expect(statusObj.status).to.eql(\"UNDER_REVIEW\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"CLARIFICATION_REQUIRED\"){",
											"                    pm.expect(statusObj.status).to.eql(\"CLARIFICATION_REQUIRED\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"            });",
											"        }",
											"",
											"        if (obj.rule_name === \"GitHub Personal Access Token\"){",
											"            pm.expect(obj.rule_name).to.eql(\"GitHub Personal Access Token\");",
											"            pm.expect(obj.finding_count).to.eql(1);",
											"            obj.finding_statuses_count.forEach((statusObj) => {",
											"                if(statusObj.status === \"TRUE_POSITIVE\"){",
											"                    pm.expect(statusObj.status).to.eql(\"TRUE_POSITIVE\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"FALSE_POSITIVE\"){",
											"                    pm.expect(statusObj.status).to.eql(\"FALSE_POSITIVE\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"NOT_ANALYZED\"){",
											"                    pm.expect(statusObj.status).to.eql(\"NOT_ANALYZED\");",
											"                    pm.expect(statusObj.count).to.eql(1);",
											"                }",
											"                if(statusObj.status === \"UNDER_REVIEW\"){",
											"                    pm.expect(statusObj.status).to.eql(\"UNDER_REVIEW\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"                if(statusObj.status === \"CLARIFICATION_REQUIRED\"){",
											"                    pm.expect(statusObj.status).to.eql(\"CLARIFICATION_REQUIRED\");",
											"                    pm.expect(statusObj.count).to.eql(0);",
											"                }",
											"            });",
											"        }",
											"",
											"    });",
											"",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rules/finding-status-count?rule_pack_version=1.0.0&rule_pack_version=1.0.1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rules",
										"finding-status-count"
									],
									"query": [
										{
											"key": "rule_pack_version",
											"value": "1.0.0"
										},
										{
											"key": "rule_pack_version",
											"value": "1.0.1"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						},
						{
							"name": "Get detected rules with counts per status with invalid rule pack in filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(0);",
											"",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/rules/finding-status-count?rule_pack_version=invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"rules",
										"finding-status-count"
									],
									"query": [
										{
											"key": "rule_pack_version",
											"value": "invalid"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						}
					]
				},
				{
					"name": "metrics",
					"item": [
						{
							"name": "Get count of audit status over time for given weeks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(13);",
											"    responseJson.forEach((obj) => {",
											"        pm.expect(obj).to.have.property('time_period');",
											"        pm.expect(obj).to.have.property('vcs_provider_finding_count');",
											"        pm.expect(obj.vcs_provider_finding_count).to.have.property('AZURE_DEVOPS');",
											"        pm.expect(obj.vcs_provider_finding_count).to.have.property('BITBUCKET');",
											"        pm.expect(obj.vcs_provider_finding_count).to.have.property('GITHUB_PUBLIC');",
											"        pm.expect(obj).to.have.property('total');",
											"    });",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/metrics/audited-count-over-time",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"metrics",
										"audited-count-over-time"
									]
								},
								"description": "    Retrieve count of audited findings over time for given weeks\n- **db_connection**: Session of the database connection\n- **weeks**: Nr of weeks for which to retrieve the audit status count\n- **audit_status**: audit status for which to retrieve the counts, defaults to True positive\n- **return**: [DateCountModel]\n    The output will contain a list of DateCountModel type objects"
							},
							"response": [
								{
									"name": "Retrieve count of audit status over time for given weeks",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/resc/v1/metrics/audited-count-over-time",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"resc",
												"v1",
												"metrics",
												"audited-count-over-time"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"time_period\": \"pariatur culpa sint\",\n    \"vcs_provider_finding_count\": {\n      \"AZURE_DEVOPS\": 0,\n      \"BITBUCKET\": 0,\n      \"GITHUB_PUBLIC\": 0\n    },\n    \"total\": 0\n  },\n  {\n    \"time_period\": \"sit\",\n    \"vcs_provider_finding_count\": {\n      \"AZURE_DEVOPS\": 0,\n      \"BITBUCKET\": 0,\n      \"GITHUB_PUBLIC\": 0\n    },\n    \"total\": 0\n  }\n]"
								}
							]
						},
						{
							"name": "Get count of findings over time for given weeks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(13);",
											"    responseJson.forEach((obj) => {",
											"        pm.expect(obj).to.have.property('time_period');",
											"        pm.expect(obj).to.have.property('vcs_provider_finding_count');",
											"        pm.expect(obj.vcs_provider_finding_count).to.have.property('AZURE_DEVOPS');",
											"        pm.expect(obj.vcs_provider_finding_count).to.have.property('BITBUCKET');",
											"        pm.expect(obj.vcs_provider_finding_count).to.have.property('GITHUB_PUBLIC');",
											"        pm.expect(obj).to.have.property('total');",
											"    });",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/metrics/count-per-vcs-provider-by-week",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"metrics",
										"count-per-vcs-provider-by-week"
									]
								},
								"description": "    Retrieve count of findings over time for given weeks\n- **db_connection**: Session of the database connection\n- **weeks**: Nr of weeks for which to retrieve the audit status count\n- **audit_status**: audit status for which to retrieve the counts, defaults to True positive\n- **return**: [DateCountModel]\n    The output will contain a list of DateCountModel type objects"
							},
							"response": [
								{
									"name": "Retrieve count of findings over time for given weeks",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/resc/v1/metrics/count-per-vcs-provider-by-week",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"resc",
												"v1",
												"metrics",
												"count-per-vcs-provider-by-week"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"time_period\": \"fugiat do\",\n    \"vcs_provider_finding_count\": {\n      \"AZURE_DEVOPS\": 0,\n      \"BITBUCKET\": 0,\n      \"GITHUB_PUBLIC\": 0\n    },\n    \"total\": 0\n  },\n  {\n    \"time_period\": \"ullamco reprehenderit esse\",\n    \"vcs_provider_finding_count\": {\n      \"AZURE_DEVOPS\": 0,\n      \"BITBUCKET\": 0,\n      \"GITHUB_PUBLIC\": 0\n    },\n    \"total\": 0\n  }\n]"
								}
							]
						},
						{
							"name": "Get count of findings over time for given weeks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(13);",
											"    responseJson.forEach((obj) => {",
											"        pm.expect(obj).to.have.property('time_period');",
											"        pm.expect(obj).to.have.property('vcs_provider_finding_count');",
											"        pm.expect(obj.vcs_provider_finding_count).to.have.property('AZURE_DEVOPS');",
											"        pm.expect(obj.vcs_provider_finding_count).to.have.property('BITBUCKET');",
											"        pm.expect(obj.vcs_provider_finding_count).to.have.property('GITHUB_PUBLIC');",
											"        pm.expect(obj).to.have.property('total');",
											"    });",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/metrics/un-triaged-count-over-time",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"metrics",
										"un-triaged-count-over-time"
									]
								},
								"description": "    Retrieve count of findings over time for given weeks\n- **db_connection**: Session of the database connection\n- **weeks**: Nr of weeks for which to retrieve the audit status count\n- **audit_status**: audit status for which to retrieve the counts, defaults to True positive\n- **return**: [DateCountModel]\n    The output will contain a list of DateCountModel type objects"
							},
							"response": [
								{
									"name": "Retrieve count of findings over time for given weeks",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/resc/v1/metrics/un-triaged-count-over-time",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"resc",
												"v1",
												"metrics",
												"un-triaged-count-over-time"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"time_period\": \"sed cupidatat dolore commodo\",\n    \"vcs_provider_finding_count\": {\n      \"AZURE_DEVOPS\": 0,\n      \"BITBUCKET\": 0,\n      \"GITHUB_PUBLIC\": 0\n    },\n    \"total\": 0\n  },\n  {\n    \"time_period\": \"veniam\",\n    \"vcs_provider_finding_count\": {\n      \"AZURE_DEVOPS\": 0,\n      \"BITBUCKET\": 0,\n      \"GITHUB_PUBLIC\": 0\n    },\n    \"total\": 0\n  }\n]"
								}
							]
						},
						{
							"name": "Get count of auditds by auditer over time for given weeks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"    pm.expect(responseJson.length).to.eql(13);",
											"    responseJson.forEach((obj) => {",
											"        pm.expect(obj).to.have.property('time_period');",
											"        pm.expect(obj).to.have.property('audit_by_auditor_count');",
											"        pm.expect(obj).to.have.property('total');",
											"    });",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/metrics/audit-count-by-auditor-over-time",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"metrics",
										"audit-count-by-auditor-over-time"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Personal Audit Metrics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.have.property('today');",
											"    pm.expect(responseJson).to.have.property('current_week');",
											"    pm.expect(responseJson).to.have.property('last_week');",
											"    pm.expect(responseJson).to.have.property('current_month');",
											"    pm.expect(responseJson).to.have.property('current_year');",
											"    pm.expect(responseJson).to.have.property('forever');",
											"    pm.expect(responseJson).to.have.property('rank_current_week');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/metrics/personal-audits",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"metrics",
										"personal-audits"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete",
					"item": [
						{
							"name": "Delete a finding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"ok\"]).to.eql(true);",
											"});",
											"",
											"pm.test(\"Finding id doesn't exist\", function() {",
											"    pm.environment.unset(\"finding_id\");",
											"    pm.expect(pm.environment.get(\"finding_id\")).to.eql(undefined);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/findings/:finding_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"findings",
										":finding_id"
									],
									"variable": [
										{
											"key": "finding_id",
											"value": "{{finding_id}}"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						},
						{
							"name": "Delete a scan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"ok\"]).to.eql(true);",
											"});",
											"",
											"pm.test(\"Scan id doesn't exist\", function() {",
											"    pm.environment.unset(\"scan_id\");",
											"    pm.expect(pm.environment.get(\"scan_id\")).to.eql(undefined);",
											"    pm.environment.unset(\"currentdate\");",
											"    pm.expect(pm.environment.get(\"currentdate\")).to.eql(undefined);",
											"    pm.environment.unset(\"end_date_time\");",
											"    pm.expect(pm.environment.get(\"end_date_time\")).to.eql(undefined);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/scans/:scan_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"scans",
										":scan_id"
									],
									"variable": [
										{
											"key": "scan_id",
											"value": "{{scan_id}}"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						},
						{
							"name": "Delete a repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"ok\"]).to.eql(true);",
											"});",
											"",
											"pm.test(\"Repository id doesn't exist\", function() {",
											"    pm.environment.unset(\"repository_id\");",
											"    pm.expect(pm.environment.get(\"repository_id\")).to.eql(undefined);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/repositories/:repository_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"repositories",
										":repository_id"
									],
									"variable": [
										{
											"key": "repository_id",
											"value": "{{repository_id}}"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						},
						{
							"name": "Delete a vcs instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is OK\"), function (){",
											"    pm.response.to.have.property(\"status\",\" OK\")",
											"}",
											"",
											"const responseJson = pm.response.json();",
											"pm.test(\"Response body matches\", function() {",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"    pm.expect(responseJson[\"ok\"]).to.eql(true);",
											"});",
											"",
											"pm.test(\"VCS instance id doesn't exist\", function() {",
											"    pm.environment.unset(\"vcs_instance_id\");",
											"    pm.expect(pm.environment.get(\"vcs_instance_id\")).to.eql(undefined);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/resc/v1/vcs-instances/:vcs_instance_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resc",
										"v1",
										"vcs-instances",
										":vcs_instance_id"
									],
									"variable": [
										{
											"key": "vcs_instance_id",
											"value": "{{vcs_instance_id}}"
										}
									]
								},
								"description": "    Retrieve all uniquely detected rules across all findings in the database\n:param db_connection:\n    Session of the database connection\n:return: [str]\n    The output will contain a list of strings of unique rules in the findings table"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sts/v1/detected-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sts",
												"v1",
												"detected-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n \"occaecat ut ea et Ut\",\n \"ut nostrud\"\n]"
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "/",
			"type": "string"
		}
	]
}