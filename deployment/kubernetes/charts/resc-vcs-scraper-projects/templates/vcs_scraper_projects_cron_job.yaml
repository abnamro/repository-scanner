apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.global.appName }}-vcs-scraper-projects
  namespace: {{ .Values.global.namespace }}
spec:
  suspend: {{ .Values.suspend }}
  schedule: "{{ .Values.config.schedule }}"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: {{ .Values.config.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.config.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{ if .Values.additionalLabels }}
            {{- range $key, $val := .Values.additionalLabels }}
            {{ $key }}: {{ $val | quote }}
            {{- end}}
            {{ end }}
            kubeaudit.io/allow-disabled-apparmor: "apparmor-needs-to-be-installed-on-host"
            kubeaudit.io/allow-read-only-root-filesystem-false: "required-to-write-log-files"
          annotations:
            {{- with include "resc.vcsScraperProjectsAnnotations" .}}
              {{- nindent 12 .}}
            {{- end }}
        spec:
          {{ if .Values.global.serviceAccountName }}
          serviceAccountName: {{ .Values.global.serviceAccountName }}
          {{ end }}
          containers:
          - name: {{ .Values.global.appName }}-vcs-scraper-projects
            image: {{ .Values.VCSScraper.image.repository | default .Values.global.VCSScraper.image.repository }}{{ .Values.VCSScraper.image.name | default .Values.global.VCSScraper.image.name }}:{{ .Values.VCSScraper.image.tag | default .Values.global.VCSScraper.image.tag }}
            imagePullPolicy: {{ .Values.VCSScraper.image.pullPolicy | default .Values.global.VCSScraper.image.pullPolicy }}
            command: ["sh", "-c"]
            args: [ "{{ .Values.preStartUpCommand }} collect_projects"]
            resources:
              requests:
                cpu: {{ .Values.resources.requests.cpu }}
                memory: {{ .Values.resources.requests.memory }}
              limits:
                cpu: {{ .Values.resources.limits.cpu }}
                memory: {{ .Values.resources.limits.memory }}
            envFrom:
              - configMapRef:
                  name: {{ .Values.global.appName }}-vcs-scraper-projects-config
              - configMapRef:
                  name: {{ .Values.global.appName }}-rabbitmq-config
              {{ if eq .Values.useKubernetesSecret "true"}}
              - secretRef:
                  name: {{ .Values.global.appName }}-vcs-instances-secret
              - secretRef:
                  name: {{ .Values.global.appName }}-rabbitmq-user-secret
              {{ end }}
            volumeMounts:
              - name: config-volume
                mountPath: {{ .Values.config.vcs_instance_file_path }}
                subPath: vcs_instances_config.json
              {{- with include "resc.vcsScraperProjectsAdditionalVolumeMounts" .}}
                {{- nindent 14 .}}
              {{- end }}
            env:
              - name: GET_HOSTS_FROM
                value: dns
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              privileged: false
              capabilities:
                drop:
                  - ALL
              seccompProfile:
                  type: RuntimeDefault
              runAsNonRoot: true
              runAsUser: 10001
          volumes:
            - name: config-volume
              configMap:
                name: {{ .Values.global.appName }}-vcs-instances-config
            {{- with include "resc.vcsScraperProjectsAdditionalVolumes" .}}
              {{- nindent 12 .}}
            {{- end }}
          restartPolicy: {{ .Values.restartPolicy }}
          {{ if .Values.global.imagePullSecret }}
          imagePullSecrets:
            - name: {{ .Values.global.imagePullSecret }}
          {{ end }}
      backoffLimit: {{ .Values.backoffLimit }}
