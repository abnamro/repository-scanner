{{ if eq .Values.global.enableInClusterDatabase "true"}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.global.appName }}-db
  namespace: {{ .Values.global.namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.global.appName }}
      tier: ms-database
  replicas: 1
  template:
    metadata:
      annotations:
        container.apparmor.security.beta.kubernetes.io/resc-db: unconfined
      labels:
        app: {{ .Values.global.appName }}
        tier: ms-database
        kubeaudit.io/allow-disabled-apparmor: "apparmor-needs-to-be-installed-on-host"
        kubeaudit.io/allow-capability-net-bind-service: "required-by-sqlserver-to-bind-the-default-MSDTC-RPC-on-port-135"
        kubeaudit.io/allow-read-only-root-filesystem-false: "required-to-write-database-files"
    spec:
      volumes:
        - name: {{ .Values.global.appName }}-database-pv-storage
          persistentVolumeClaim:
            claimName: {{ .Values.global.appName }}-database-pv-volume-claim
      containers:
        - name: {{ .Values.global.appName }}-db
          image: {{ .Values.database.image.repository }}{{ .Values.database.image.name }}:{{ .Values.database.image.tag }}
          imagePullPolicy: {{ .Values.database.image.pullPolicy }}
          resources:
            requests:
              cpu: {{ .Values.database.resources.requests.cpu }}
              memory: {{ .Values.database.resources.requests.memory }}
            limits:
              cpu: {{ .Values.database.resources.limits.cpu }}
              memory: {{ .Values.database.resources.limits.memory }}
          env:
            - name: GET_HOSTS_FROM
              value: dns
          envFrom:
            - configMapRef:
                name: {{ .Values.global.appName }}-database-config
            - secretRef:
                name: {{ .Values.global.appName }}-database-secret
          volumeMounts:
            - mountPath: "/var/opt/mssql/data"
              name: {{ .Values.global.appName }}-database-pv-storage
          ports:
            - containerPort: {{ .Values.database.port }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            privileged: false
            capabilities:
              drop:
                - ALL
              add:
              - NET_BIND_SERVICE
            runAsNonRoot: true
            runAsUser: 10001
            seccompProfile:
              type: RuntimeDefault
          livenessProbe:
            tcpSocket:
              port: {{ .Values.database.port }}
            initialDelaySeconds: 10
            periodSeconds: 300
            timeoutSeconds: 60
          readinessProbe:
            tcpSocket:
              port: {{ .Values.database.port }}
            initialDelaySeconds: 10
            periodSeconds: 300
            timeoutSeconds: 60
      automountServiceAccountToken: false
{{ end }}