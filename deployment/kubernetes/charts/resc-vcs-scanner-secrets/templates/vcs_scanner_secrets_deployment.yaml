apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.global.appName }}-vcs-scanner-secrets
  namespace: {{ .Values.global.namespace }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      tier: {{ .Values.global.appName }}-vcs-scanner-secrets
  template:
    metadata:
      labels:
        {{ if .Values.additionalLabels }}
        {{- range $key, $val := .Values.additionalLabels }}
        {{ $key }}: {{ $val | quote }}
        {{- end}}
        {{ end }}
        tier: {{ .Values.global.appName }}-vcs-scanner-secrets
        kubeaudit.io/allow-disabled-apparmor: "apparmor-needs-to-be-installed-on-host"
        kubeaudit.io/allow-read-only-root-filesystem-false: "required-to-write-log-files"
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
        {{- with include "resc.vcsScannerSecretsAnnotations" .}}
          {{- nindent 8 .}}
        {{- end }}
        container.apparmor.security.beta.kubernetes.io/resc--vcs-scanner-secrets: unconfined
    spec:
      {{ if .Values.global.serviceAccountName }}
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      {{ end }}
      containers:
      - name: {{ .Values.global.appName }}-{{ .Values.vcsTypeShort }}-vcs-scanner-secrets
        image: {{ .Values.image.repository | default .Values.global.rescSecretScanner.image.repository }}{{ .Values.image.name | default .Values.global.rescSecretScanner.image.name }}:{{ .Values.image.tag | default .Values.global.rescSecretScanner.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.rescSecretScanner.image.pullPolicy }}
        command: ["sh", "-c"]
        args: ["{{ .Values.preStartUpCommand }} celery  -A  vcs_scanner.secret_scanners.celery_worker worker --loglevel={{ .Values.config.loglevel }} -E -Q {{ .Values.config.rabbitmq_queue }} --concurrency=1  --prefetch-multiplier=1"]
        resources:
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
            memory: {{ .Values.resources.limits.memory }}
        envFrom:
          - configMapRef:
              name: {{ .Values.global.appName }}-vcs-scanner-secrets-config
          - configMapRef:
              name: {{ .Values.global.appName }}-rabbitmq-config
          {{ if eq .Values.useKubernetesSecret "true"}}
          - secretRef:
              name: {{ .Values.global.appName }}-vcs-instances-secret
          - secretRef:
              name: {{ .Values.global.appName }}-rabbitmq-user-secret
          {{ end }}
        volumeMounts:
            - name: config-volume
              mountPath: {{ .Values.config.vcs_instance_file_path }}
              subPath: vcs_instances_config.json
          {{- $additionalVolumeMounts := include "resc.vcsScannerSecretsAdditionalVolumeMounts" . }}
          {{- if $additionalVolumeMounts }}
          {{- with include "resc.vcsScannerSecretsAdditionalVolumeMounts" .}}
            {{- nindent 12 .}}
          {{- end }}
          {{- end }}
        env:
          - name: GET_HOSTS_FROM
            value: dns
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          privileged: false
          capabilities:
            drop:
              - ALL
          seccompProfile:
              type: RuntimeDefault
          runAsNonRoot: true
          runAsUser: 10001
      volumes:
        - name: config-volume
          configMap:
            name: {{ .Values.global.appName }}-vcs-instances-config
        {{- $additionalVolumes := include "resc.vcsScannerSecretsAdditionalVolumes" . }}
        {{- if $additionalVolumes }}
        {{- with include "resc.vcsScannerSecretsAdditionalVolumes" .}}
          {{- nindent 8 .}}
        {{- end }}
        {{- end }}
      restartPolicy: {{ .Values.restartPolicy }}
      {{ if .Values.global.imagePullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.imagePullSecret }}
      {{ end }}
      {{ if .Values.global.serviceAccountName }}
      automountServiceAccountToken: true
      {{ else }}
      automountServiceAccountToken: false
      {{ end }}
